
miska.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007570  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007708  08007708  00017708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007768  08007768  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007768  08007768  00017768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007770  08007770  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007770  08007770  00017770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007774  08007774  00017774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08007778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a4c  200001d8  08007950  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c24  08007950  00020c24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000177ff  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003385  00000000  00000000  00037a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001150  00000000  00000000  0003ad90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ff0  00000000  00000000  0003bee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000197f5  00000000  00000000  0003ced0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011847  00000000  00000000  000566c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d34f  00000000  00000000  00067f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f525b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048ec  00000000  00000000  000f52d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001d8 	.word	0x200001d8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080076f0 	.word	0x080076f0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001dc 	.word	0x200001dc
 80001d4:	080076f0 	.word	0x080076f0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <krog>:
int8_t porocilo[4] = {0};  // struktura za opis podatkov iz miske

uint8_t polje_x[8] = {-1, 0, 1, 1, 1, 0, -1, -1}; // zaporedje kako se bomo premikali po x osi mnozil z 31
uint8_t polje_y[8] = {1, 1, 1, 0, -1, -1, -1, 0}; // zaporedje kako se bomo premikali po y osi

void krog(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0

    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);

    HAL_Delay(140);
    */
	for(int i=0; i<8;i++){
 80004de:	2300      	movs	r3, #0
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	e025      	b.n	8000530 <krog+0x58>
		porocilo[1]=polje_x[i] * 31;
 80004e4:	4a16      	ldr	r2, [pc, #88]	; (8000540 <krog+0x68>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4413      	add	r3, r2
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	461a      	mov	r2, r3
 80004ee:	0152      	lsls	r2, r2, #5
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	b25a      	sxtb	r2, r3
 80004f6:	4b13      	ldr	r3, [pc, #76]	; (8000544 <krog+0x6c>)
 80004f8:	705a      	strb	r2, [r3, #1]
		porocilo[2]=polje_y[i] * 31;
 80004fa:	4a13      	ldr	r2, [pc, #76]	; (8000548 <krog+0x70>)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4413      	add	r3, r2
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	461a      	mov	r2, r3
 8000504:	0152      	lsls	r2, r2, #5
 8000506:	1ad3      	subs	r3, r2, r3
 8000508:	b2db      	uxtb	r3, r3
 800050a:	b25a      	sxtb	r2, r3
 800050c:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <krog+0x6c>)
 800050e:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, porocilo, 4);
 8000510:	2204      	movs	r2, #4
 8000512:	490c      	ldr	r1, [pc, #48]	; (8000544 <krog+0x6c>)
 8000514:	480d      	ldr	r0, [pc, #52]	; (800054c <krog+0x74>)
 8000516:	f005 fa71 	bl	80059fc <USBD_HID_SendReport>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800051a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800051e:	480c      	ldr	r0, [pc, #48]	; (8000550 <krog+0x78>)
 8000520:	f001 f895 	bl	800164e <HAL_GPIO_TogglePin>

	    HAL_Delay(140);
 8000524:	208c      	movs	r0, #140	; 0x8c
 8000526:	f000 fdab 	bl	8001080 <HAL_Delay>
	for(int i=0; i<8;i++){
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3301      	adds	r3, #1
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b07      	cmp	r3, #7
 8000534:	ddd6      	ble.n	80004e4 <krog+0xc>

	}

}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000000 	.word	0x20000000
 8000544:	200001f4 	.word	0x200001f4
 8000548:	20000008 	.word	0x20000008
 800054c:	20000348 	.word	0x20000348
 8000550:	40020c00 	.word	0x40020c00

08000554 <miska_napredno>:

void miska_napredno(){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	porocilo[3] =- 4;  // scroll
	USBD_HID_SendReport(&hUsbDeviceFS, porocilo, 4);
	HAL_Delay(140);
	*/

	porocilo[1] =- 419;  // gre desno
 8000558:	4b39      	ldr	r3, [pc, #228]	; (8000640 <miska_napredno+0xec>)
 800055a:	225d      	movs	r2, #93	; 0x5d
 800055c:	705a      	strb	r2, [r3, #1]
	while(USBD_HID_SendReport(&hUsbDeviceFS, porocilo, 4));
 800055e:	bf00      	nop
 8000560:	2204      	movs	r2, #4
 8000562:	4937      	ldr	r1, [pc, #220]	; (8000640 <miska_napredno+0xec>)
 8000564:	4837      	ldr	r0, [pc, #220]	; (8000644 <miska_napredno+0xf0>)
 8000566:	f005 fa49 	bl	80059fc <USBD_HID_SendReport>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d1f7      	bne.n	8000560 <miska_napredno+0xc>
	HAL_Delay(140);
 8000570:	208c      	movs	r0, #140	; 0x8c
 8000572:	f000 fd85 	bl	8001080 <HAL_Delay>

	porocilo[1] = 0; // da ne gremo vec desno
 8000576:	4b32      	ldr	r3, [pc, #200]	; (8000640 <miska_napredno+0xec>)
 8000578:	2200      	movs	r2, #0
 800057a:	705a      	strb	r2, [r3, #1]
	porocilo[0] = 2;  // desni click stisnemo
 800057c:	4b30      	ldr	r3, [pc, #192]	; (8000640 <miska_napredno+0xec>)
 800057e:	2202      	movs	r2, #2
 8000580:	701a      	strb	r2, [r3, #0]
	while(USBD_HID_SendReport(&hUsbDeviceFS, porocilo, 4));
 8000582:	bf00      	nop
 8000584:	2204      	movs	r2, #4
 8000586:	492e      	ldr	r1, [pc, #184]	; (8000640 <miska_napredno+0xec>)
 8000588:	482e      	ldr	r0, [pc, #184]	; (8000644 <miska_napredno+0xf0>)
 800058a:	f005 fa37 	bl	80059fc <USBD_HID_SendReport>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d1f7      	bne.n	8000584 <miska_napredno+0x30>
	HAL_Delay(140);
 8000594:	208c      	movs	r0, #140	; 0x8c
 8000596:	f000 fd73 	bl	8001080 <HAL_Delay>

	porocilo[0] = 0;  // desni click spustimo
 800059a:	4b29      	ldr	r3, [pc, #164]	; (8000640 <miska_napredno+0xec>)
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
	while(USBD_HID_SendReport(&hUsbDeviceFS, porocilo, 4));
 80005a0:	bf00      	nop
 80005a2:	2204      	movs	r2, #4
 80005a4:	4926      	ldr	r1, [pc, #152]	; (8000640 <miska_napredno+0xec>)
 80005a6:	4827      	ldr	r0, [pc, #156]	; (8000644 <miska_napredno+0xf0>)
 80005a8:	f005 fa28 	bl	80059fc <USBD_HID_SendReport>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1f7      	bne.n	80005a2 <miska_napredno+0x4e>
	HAL_Delay(140);
 80005b2:	208c      	movs	r0, #140	; 0x8c
 80005b4:	f000 fd64 	bl	8001080 <HAL_Delay>

	porocilo[3] =- 3;  // scroll
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <miska_napredno+0xec>)
 80005ba:	22fd      	movs	r2, #253	; 0xfd
 80005bc:	70da      	strb	r2, [r3, #3]
	while(USBD_HID_SendReport(&hUsbDeviceFS, porocilo, 4));
 80005be:	bf00      	nop
 80005c0:	2204      	movs	r2, #4
 80005c2:	491f      	ldr	r1, [pc, #124]	; (8000640 <miska_napredno+0xec>)
 80005c4:	481f      	ldr	r0, [pc, #124]	; (8000644 <miska_napredno+0xf0>)
 80005c6:	f005 fa19 	bl	80059fc <USBD_HID_SendReport>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d1f7      	bne.n	80005c0 <miska_napredno+0x6c>
	HAL_Delay(140);
 80005d0:	208c      	movs	r0, #140	; 0x8c
 80005d2:	f000 fd55 	bl	8001080 <HAL_Delay>

	porocilo[3] = 0; // da ne skrolamo vec
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <miska_napredno+0xec>)
 80005d8:	2200      	movs	r2, #0
 80005da:	70da      	strb	r2, [r3, #3]
	porocilo[0] = 1;  // levi click stisnemo
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <miska_napredno+0xec>)
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
	while(USBD_HID_SendReport(&hUsbDeviceFS, porocilo, 4));
 80005e2:	bf00      	nop
 80005e4:	2204      	movs	r2, #4
 80005e6:	4916      	ldr	r1, [pc, #88]	; (8000640 <miska_napredno+0xec>)
 80005e8:	4816      	ldr	r0, [pc, #88]	; (8000644 <miska_napredno+0xf0>)
 80005ea:	f005 fa07 	bl	80059fc <USBD_HID_SendReport>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d1f7      	bne.n	80005e4 <miska_napredno+0x90>
	HAL_Delay(140);
 80005f4:	208c      	movs	r0, #140	; 0x8c
 80005f6:	f000 fd43 	bl	8001080 <HAL_Delay>

	porocilo[0] = 0;  // levi click spustimo
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <miska_napredno+0xec>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
	while(USBD_HID_SendReport(&hUsbDeviceFS, porocilo, 4));
 8000600:	bf00      	nop
 8000602:	2204      	movs	r2, #4
 8000604:	490e      	ldr	r1, [pc, #56]	; (8000640 <miska_napredno+0xec>)
 8000606:	480f      	ldr	r0, [pc, #60]	; (8000644 <miska_napredno+0xf0>)
 8000608:	f005 f9f8 	bl	80059fc <USBD_HID_SendReport>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1f7      	bne.n	8000602 <miska_napredno+0xae>
	HAL_Delay(140);
 8000612:	208c      	movs	r0, #140	; 0x8c
 8000614:	f000 fd34 	bl	8001080 <HAL_Delay>

	porocilo[1] = 0;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <miska_napredno+0xec>)
 800061a:	2200      	movs	r2, #0
 800061c:	705a      	strb	r2, [r3, #1]
	porocilo[1] =+ 419;  // gre levo
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <miska_napredno+0xec>)
 8000620:	22a3      	movs	r2, #163	; 0xa3
 8000622:	705a      	strb	r2, [r3, #1]
	while(USBD_HID_SendReport(&hUsbDeviceFS, porocilo, 4));
 8000624:	bf00      	nop
 8000626:	2204      	movs	r2, #4
 8000628:	4905      	ldr	r1, [pc, #20]	; (8000640 <miska_napredno+0xec>)
 800062a:	4806      	ldr	r0, [pc, #24]	; (8000644 <miska_napredno+0xf0>)
 800062c:	f005 f9e6 	bl	80059fc <USBD_HID_SendReport>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1f7      	bne.n	8000626 <miska_napredno+0xd2>
	HAL_Delay(140);
 8000636:	208c      	movs	r0, #140	; 0x8c
 8000638:	f000 fd22 	bl	8001080 <HAL_Delay>

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200001f4 	.word	0x200001f4
 8000644:	20000348 	.word	0x20000348

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064e:	f000 fca5 	bl	8000f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000652:	f000 f847 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000656:	f000 f98b 	bl	8000970 <MX_GPIO_Init>
  MX_I2C1_Init();
 800065a:	f000 f8c7 	bl	80007ec <MX_I2C1_Init>
  MX_I2S2_Init();
 800065e:	f000 f8f3 	bl	8000848 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000662:	f000 f91f 	bl	80008a4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000666:	f000 f94d 	bl	8000904 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800066a:	f006 fb23 	bl	8006cb4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	uint32_t spremeni = 0; // ce moremo spremenit
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
	uint32_t zaporedje = 0; // kateri pritisk
 8000672:	2300      	movs	r3, #0
 8000674:	60bb      	str	r3, [r7, #8]
	uint32_t ponovitve = 0; // ce smo liho prvic
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
	uint32_t ponovitve_s = 0; // ce smo sodo prvic
 800067a:	2300      	movs	r3, #0
 800067c:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 800067e:	2101      	movs	r1, #1
 8000680:	4817      	ldr	r0, [pc, #92]	; (80006e0 <main+0x98>)
 8000682:	f000 ffb3 	bl	80015ec <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d008      	beq.n	800069e <main+0x56>
		  // smo pritisnili gumb
		  if(spremeni == 0){
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d102      	bne.n	8000698 <main+0x50>
			  // prvic not
			  zaporedje++;
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	3301      	adds	r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
		  }
		  spremeni = 1;
 8000698:	2301      	movs	r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	e001      	b.n	80006a2 <main+0x5a>
	  }
	  else{
		  spremeni = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
	  }

		if(zaporedje%2 == 1){
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d00a      	beq.n	80006c2 <main+0x7a>
		  // lihi pritisk
		  if(ponovitve == 0){
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d103      	bne.n	80006ba <main+0x72>
			  krog();
 80006b2:	f7ff ff11 	bl	80004d8 <krog>
			  //miska_napredno();
			  ponovitve_s =0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
		  }
		  ponovitve++;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3301      	adds	r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	e7dd      	b.n	800067e <main+0x36>

		}
		else if (zaporedje != 0){
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d0da      	beq.n	800067e <main+0x36>

		  if(ponovitve_s==0){
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d103      	bne.n	80006d6 <main+0x8e>
			  miska_napredno();
 80006ce:	f7ff ff41 	bl	8000554 <miska_napredno>
			  ponovitve = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
		  }
		  ponovitve_s++;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	603b      	str	r3, [r7, #0]
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 80006dc:	e7cf      	b.n	800067e <main+0x36>
 80006de:	bf00      	nop
 80006e0:	40020000 	.word	0x40020000

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b09a      	sub	sp, #104	; 0x68
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006ee:	2230      	movs	r2, #48	; 0x30
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f006 ff3a 	bl	800756c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
 8000718:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b31      	ldr	r3, [pc, #196]	; (80007e4 <SystemClock_Config+0x100>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000722:	4a30      	ldr	r2, [pc, #192]	; (80007e4 <SystemClock_Config+0x100>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000728:	6413      	str	r3, [r2, #64]	; 0x40
 800072a:	4b2e      	ldr	r3, [pc, #184]	; (80007e4 <SystemClock_Config+0x100>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <SystemClock_Config+0x104>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a2a      	ldr	r2, [pc, #168]	; (80007e8 <SystemClock_Config+0x104>)
 8000740:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000744:	6013      	str	r3, [r2, #0]
 8000746:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <SystemClock_Config+0x104>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000752:	2301      	movs	r3, #1
 8000754:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2302      	movs	r3, #2
 800075e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000760:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000764:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000766:	2304      	movs	r3, #4
 8000768:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800076a:	23c0      	movs	r3, #192	; 0xc0
 800076c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800076e:	2304      	movs	r3, #4
 8000770:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000772:	2308      	movs	r3, #8
 8000774:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000776:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800077a:	4618      	mov	r0, r3
 800077c:	f002 fec6 	bl	800350c <HAL_RCC_OscConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000786:	f000 f9cd 	bl	8000b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	230f      	movs	r3, #15
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078e:	2302      	movs	r3, #2
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000796:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800079a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a4:	2103      	movs	r1, #3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 f920 	bl	80039ec <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007b2:	f000 f9b7 	bl	8000b24 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007b6:	2301      	movs	r3, #1
 80007b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80007ba:	23c8      	movs	r3, #200	; 0xc8
 80007bc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80007be:	2305      	movs	r3, #5
 80007c0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	4618      	mov	r0, r3
 80007cc:	f003 faec 	bl	8003da8 <HAL_RCCEx_PeriphCLKConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80007d6:	f000 f9a5 	bl	8000b24 <Error_Handler>
  }
}
 80007da:	bf00      	nop
 80007dc:	3768      	adds	r7, #104	; 0x68
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_I2C1_Init+0x50>)
 80007f2:	4a13      	ldr	r2, [pc, #76]	; (8000840 <MX_I2C1_Init+0x54>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_I2C1_Init+0x50>)
 80007f8:	4a12      	ldr	r2, [pc, #72]	; (8000844 <MX_I2C1_Init+0x58>)
 80007fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_I2C1_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_I2C1_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_I2C1_Init+0x50>)
 800080a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800080e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081c:	4b07      	ldr	r3, [pc, #28]	; (800083c <MX_I2C1_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_I2C1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_I2C1_Init+0x50>)
 800082a:	f000 ff2b 	bl	8001684 <HAL_I2C_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000834:	f000 f976 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000208 	.word	0x20000208
 8000840:	40005400 	.word	0x40005400
 8000844:	000186a0 	.word	0x000186a0

08000848 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_I2S2_Init+0x50>)
 800084e:	4a13      	ldr	r2, [pc, #76]	; (800089c <MX_I2S2_Init+0x54>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_I2S2_Init+0x50>)
 8000854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000858:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_I2S2_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000860:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <MX_I2S2_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_I2S2_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <MX_I2S2_Init+0x50>)
 800086e:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <MX_I2S2_Init+0x58>)
 8000870:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_I2S2_Init+0x50>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <MX_I2S2_Init+0x50>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_I2S2_Init+0x50>)
 8000880:	2201      	movs	r2, #1
 8000882:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_I2S2_Init+0x50>)
 8000886:	f001 f835 	bl	80018f4 <HAL_I2S_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000890:	f000 f948 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200002b4 	.word	0x200002b4
 800089c:	40003800 	.word	0x40003800
 80008a0:	00017700 	.word	0x00017700

080008a4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_I2S3_Init+0x54>)
 80008aa:	4a14      	ldr	r2, [pc, #80]	; (80008fc <MX_I2S3_Init+0x58>)
 80008ac:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_I2S3_Init+0x54>)
 80008b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_I2S3_Init+0x54>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_I2S3_Init+0x54>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <MX_I2S3_Init+0x54>)
 80008c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_I2S3_Init+0x54>)
 80008cc:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <MX_I2S3_Init+0x5c>)
 80008ce:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_I2S3_Init+0x54>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_I2S3_Init+0x54>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_I2S3_Init+0x54>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_I2S3_Init+0x54>)
 80008e4:	f001 f806 	bl	80018f4 <HAL_I2S_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008ee:	f000 f919 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200002fc 	.word	0x200002fc
 80008fc:	40003c00 	.word	0x40003c00
 8000900:	00017700 	.word	0x00017700

08000904 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_SPI1_Init+0x64>)
 800090a:	4a18      	ldr	r2, [pc, #96]	; (800096c <MX_SPI1_Init+0x68>)
 800090c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_SPI1_Init+0x64>)
 8000910:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000914:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_SPI1_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_SPI1_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_SPI1_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_SPI1_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_SPI1_Init+0x64>)
 8000930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000934:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_SPI1_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_SPI1_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_SPI1_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <MX_SPI1_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_SPI1_Init+0x64>)
 8000950:	220a      	movs	r2, #10
 8000952:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_SPI1_Init+0x64>)
 8000956:	f003 fb75 	bl	8004044 <HAL_SPI_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000960:	f000 f8e0 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	2000025c 	.word	0x2000025c
 800096c:	40013000 	.word	0x40013000

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	; 0x30
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	61bb      	str	r3, [r7, #24]
 800098a:	4b60      	ldr	r3, [pc, #384]	; (8000b0c <MX_GPIO_Init+0x19c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a5f      	ldr	r2, [pc, #380]	; (8000b0c <MX_GPIO_Init+0x19c>)
 8000990:	f043 0310 	orr.w	r3, r3, #16
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b5d      	ldr	r3, [pc, #372]	; (8000b0c <MX_GPIO_Init+0x19c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0310 	and.w	r3, r3, #16
 800099e:	61bb      	str	r3, [r7, #24]
 80009a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	4b59      	ldr	r3, [pc, #356]	; (8000b0c <MX_GPIO_Init+0x19c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a58      	ldr	r2, [pc, #352]	; (8000b0c <MX_GPIO_Init+0x19c>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b56      	ldr	r3, [pc, #344]	; (8000b0c <MX_GPIO_Init+0x19c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b52      	ldr	r3, [pc, #328]	; (8000b0c <MX_GPIO_Init+0x19c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a51      	ldr	r2, [pc, #324]	; (8000b0c <MX_GPIO_Init+0x19c>)
 80009c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b4f      	ldr	r3, [pc, #316]	; (8000b0c <MX_GPIO_Init+0x19c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b4b      	ldr	r3, [pc, #300]	; (8000b0c <MX_GPIO_Init+0x19c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a4a      	ldr	r2, [pc, #296]	; (8000b0c <MX_GPIO_Init+0x19c>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b48      	ldr	r3, [pc, #288]	; (8000b0c <MX_GPIO_Init+0x19c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	4b44      	ldr	r3, [pc, #272]	; (8000b0c <MX_GPIO_Init+0x19c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a43      	ldr	r2, [pc, #268]	; (8000b0c <MX_GPIO_Init+0x19c>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b41      	ldr	r3, [pc, #260]	; (8000b0c <MX_GPIO_Init+0x19c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b3d      	ldr	r3, [pc, #244]	; (8000b0c <MX_GPIO_Init+0x19c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a3c      	ldr	r2, [pc, #240]	; (8000b0c <MX_GPIO_Init+0x19c>)
 8000a1c:	f043 0308 	orr.w	r3, r3, #8
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <MX_GPIO_Init+0x19c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0308 	and.w	r3, r3, #8
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2108      	movs	r1, #8
 8000a32:	4837      	ldr	r0, [pc, #220]	; (8000b10 <MX_GPIO_Init+0x1a0>)
 8000a34:	f000 fdf2 	bl	800161c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	4835      	ldr	r0, [pc, #212]	; (8000b14 <MX_GPIO_Init+0x1a4>)
 8000a3e:	f000 fded 	bl	800161c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a42:	2200      	movs	r2, #0
 8000a44:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a48:	4833      	ldr	r0, [pc, #204]	; (8000b18 <MX_GPIO_Init+0x1a8>)
 8000a4a:	f000 fde7 	bl	800161c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	482b      	ldr	r0, [pc, #172]	; (8000b10 <MX_GPIO_Init+0x1a0>)
 8000a62:	f000 fc41 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a66:	2308      	movs	r3, #8
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4824      	ldr	r0, [pc, #144]	; (8000b10 <MX_GPIO_Init+0x1a0>)
 8000a7e:	f000 fc33 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000a82:	2332      	movs	r3, #50	; 0x32
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a86:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <MX_GPIO_Init+0x1ac>)
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	481e      	ldr	r0, [pc, #120]	; (8000b10 <MX_GPIO_Init+0x1a0>)
 8000a96:	f000 fc27 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4818      	ldr	r0, [pc, #96]	; (8000b14 <MX_GPIO_Init+0x1a4>)
 8000ab2:	f000 fc19 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <MX_GPIO_Init+0x1ac>)
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4815      	ldr	r0, [pc, #84]	; (8000b20 <MX_GPIO_Init+0x1b0>)
 8000aca:	f000 fc0d 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ace:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ad2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480c      	ldr	r0, [pc, #48]	; (8000b18 <MX_GPIO_Init+0x1a8>)
 8000ae8:	f000 fbfe 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000aec:	2320      	movs	r3, #32
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	4806      	ldr	r0, [pc, #24]	; (8000b18 <MX_GPIO_Init+0x1a8>)
 8000b00:	f000 fbf2 	bl	80012e8 <HAL_GPIO_Init>

}
 8000b04:	bf00      	nop
 8000b06:	3730      	adds	r7, #48	; 0x30
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40020800 	.word	0x40020800
 8000b18:	40020c00 	.word	0x40020c00
 8000b1c:	10120000 	.word	0x10120000
 8000b20:	40020000 	.word	0x40020000

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
	...

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	4a0f      	ldr	r2, [pc, #60]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b72:	2007      	movs	r0, #7
 8000b74:	f000 fb76 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800

08000b84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a19      	ldr	r2, [pc, #100]	; (8000c08 <HAL_I2C_MspInit+0x84>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d12c      	bne.n	8000c00 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <HAL_I2C_MspInit+0x88>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <HAL_I2C_MspInit+0x88>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_I2C_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bc2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc8:	2312      	movs	r3, #18
 8000bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480c      	ldr	r0, [pc, #48]	; (8000c10 <HAL_I2C_MspInit+0x8c>)
 8000be0:	f000 fb82 	bl	80012e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_I2C_MspInit+0x88>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <HAL_I2C_MspInit+0x88>)
 8000bee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_I2C_MspInit+0x88>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	; 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40005400 	.word	0x40005400
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020400 	.word	0x40020400

08000c14 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08e      	sub	sp, #56	; 0x38
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a59      	ldr	r2, [pc, #356]	; (8000d98 <HAL_I2S_MspInit+0x184>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d15b      	bne.n	8000cee <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
 8000c3a:	4b58      	ldr	r3, [pc, #352]	; (8000d9c <HAL_I2S_MspInit+0x188>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a57      	ldr	r2, [pc, #348]	; (8000d9c <HAL_I2S_MspInit+0x188>)
 8000c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b55      	ldr	r3, [pc, #340]	; (8000d9c <HAL_I2S_MspInit+0x188>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4e:	623b      	str	r3, [r7, #32]
 8000c50:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
 8000c56:	4b51      	ldr	r3, [pc, #324]	; (8000d9c <HAL_I2S_MspInit+0x188>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a50      	ldr	r2, [pc, #320]	; (8000d9c <HAL_I2S_MspInit+0x188>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b4e      	ldr	r3, [pc, #312]	; (8000d9c <HAL_I2S_MspInit+0x188>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	61fb      	str	r3, [r7, #28]
 8000c6c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
 8000c72:	4b4a      	ldr	r3, [pc, #296]	; (8000d9c <HAL_I2S_MspInit+0x188>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a49      	ldr	r2, [pc, #292]	; (8000d9c <HAL_I2S_MspInit+0x188>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b47      	ldr	r3, [pc, #284]	; (8000d9c <HAL_I2S_MspInit+0x188>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	61bb      	str	r3, [r7, #24]
 8000c88:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000c9a:	2306      	movs	r3, #6
 8000c9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	483e      	ldr	r0, [pc, #248]	; (8000da0 <HAL_I2S_MspInit+0x18c>)
 8000ca6:	f000 fb1f 	bl	80012e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000caa:	2308      	movs	r3, #8
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cba:	2305      	movs	r3, #5
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4836      	ldr	r0, [pc, #216]	; (8000da0 <HAL_I2S_MspInit+0x18c>)
 8000cc6:	f000 fb0f 	bl	80012e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000cca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cdc:	2305      	movs	r3, #5
 8000cde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	482f      	ldr	r0, [pc, #188]	; (8000da4 <HAL_I2S_MspInit+0x190>)
 8000ce8:	f000 fafe 	bl	80012e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cec:	e04f      	b.n	8000d8e <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a2d      	ldr	r2, [pc, #180]	; (8000da8 <HAL_I2S_MspInit+0x194>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d14a      	bne.n	8000d8e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <HAL_I2S_MspInit+0x188>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	4a26      	ldr	r2, [pc, #152]	; (8000d9c <HAL_I2S_MspInit+0x188>)
 8000d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d06:	6413      	str	r3, [r2, #64]	; 0x40
 8000d08:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <HAL_I2S_MspInit+0x188>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <HAL_I2S_MspInit+0x188>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	4a1f      	ldr	r2, [pc, #124]	; (8000d9c <HAL_I2S_MspInit+0x188>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6313      	str	r3, [r2, #48]	; 0x30
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <HAL_I2S_MspInit+0x188>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <HAL_I2S_MspInit+0x188>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	4a18      	ldr	r2, [pc, #96]	; (8000d9c <HAL_I2S_MspInit+0x188>)
 8000d3a:	f043 0304 	orr.w	r3, r3, #4
 8000d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <HAL_I2S_MspInit+0x188>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d4c:	2310      	movs	r3, #16
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d5c:	2306      	movs	r3, #6
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	4811      	ldr	r0, [pc, #68]	; (8000dac <HAL_I2S_MspInit+0x198>)
 8000d68:	f000 fabe 	bl	80012e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d6c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d7e:	2306      	movs	r3, #6
 8000d80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <HAL_I2S_MspInit+0x18c>)
 8000d8a:	f000 faad 	bl	80012e8 <HAL_GPIO_Init>
}
 8000d8e:	bf00      	nop
 8000d90:	3738      	adds	r7, #56	; 0x38
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40003800 	.word	0x40003800
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020800 	.word	0x40020800
 8000da4:	40020400 	.word	0x40020400
 8000da8:	40003c00 	.word	0x40003c00
 8000dac:	40020000 	.word	0x40020000

08000db0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <HAL_SPI_MspInit+0x84>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d12b      	bne.n	8000e2a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <HAL_SPI_MspInit+0x88>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <HAL_SPI_MspInit+0x88>)
 8000ddc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000de0:	6453      	str	r3, [r2, #68]	; 0x44
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_SPI_MspInit+0x88>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_SPI_MspInit+0x88>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <HAL_SPI_MspInit+0x88>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_SPI_MspInit+0x88>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e0a:	23e0      	movs	r3, #224	; 0xe0
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e1a:	2305      	movs	r3, #5
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_SPI_MspInit+0x8c>)
 8000e26:	f000 fa5f 	bl	80012e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40013000 	.word	0x40013000
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e94:	f000 f8d4 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <OTG_FS_IRQHandler+0x10>)
 8000ea2:	f001 fb17 	bl	80024d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000818 	.word	0x20000818

08000eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb8:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <_sbrk+0x5c>)
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <_sbrk+0x60>)
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <_sbrk+0x64>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <_sbrk+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d207      	bcs.n	8000ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee0:	f006 fb0a 	bl	80074f8 <__errno>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	230c      	movs	r3, #12
 8000ee8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	e009      	b.n	8000f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <_sbrk+0x64>)
 8000f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20020000 	.word	0x20020000
 8000f10:	00000400 	.word	0x00000400
 8000f14:	200001f8 	.word	0x200001f8
 8000f18:	20000c28 	.word	0x20000c28

08000f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <SystemInit+0x28>)
 8000f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f26:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <SystemInit+0x28>)
 8000f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <SystemInit+0x28>)
 8000f32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f36:	609a      	str	r2, [r3, #8]
#endif
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f4e:	e003      	b.n	8000f58 <LoopCopyDataInit>

08000f50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f56:	3104      	adds	r1, #4

08000f58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f58:	480b      	ldr	r0, [pc, #44]	; (8000f88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f60:	d3f6      	bcc.n	8000f50 <CopyDataInit>
  ldr  r2, =_sbss
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f64:	e002      	b.n	8000f6c <LoopFillZerobss>

08000f66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f68:	f842 3b04 	str.w	r3, [r2], #4

08000f6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f70:	d3f9      	bcc.n	8000f66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f72:	f7ff ffd3 	bl	8000f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f76:	f006 fac5 	bl	8007504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7a:	f7ff fb65 	bl	8000648 <main>
  bx  lr    
 8000f7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f84:	08007778 	.word	0x08007778
  ldr  r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f8c:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 8000f90:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8000f94:	20000c24 	.word	0x20000c24

08000f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <HAL_Init+0x40>)
 8000fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <HAL_Init+0x40>)
 8000fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_Init+0x40>)
 8000fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f94d 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f000 f808 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff fdb0 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023c00 	.word	0x40023c00

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f965 	bl	80012ce <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 f92d 	bl	800127a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000010 	.word	0x20000010
 8001038:	20000018 	.word	0x20000018
 800103c:	20000014 	.word	0x20000014

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000018 	.word	0x20000018
 8001064:	20000344 	.word	0x20000344

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000344 	.word	0x20000344

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff ffee 	bl	8001068 <HAL_GetTick>
 800108c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	d005      	beq.n	80010a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <HAL_Delay+0x40>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a6:	bf00      	nop
 80010a8:	f7ff ffde 	bl	8001068 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f7      	bhi.n	80010a8 <HAL_Delay+0x28>
  {
  }
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000018 	.word	0x20000018

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db0b      	blt.n	8001152 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 021f 	and.w	r2, r3, #31
 8001140:	4907      	ldr	r1, [pc, #28]	; (8001160 <__NVIC_EnableIRQ+0x38>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	2001      	movs	r0, #1
 800114a:	fa00 f202 	lsl.w	r2, r0, r2
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	; (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	; (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
         );
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	; 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001230:	d301      	bcc.n	8001236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <SysTick_Config+0x40>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123e:	210f      	movs	r1, #15
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f7ff ff8e 	bl	8001164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <SysTick_Config+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <SysTick_Config+0x40>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff29 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800128c:	f7ff ff3e 	bl	800110c <__NVIC_GetPriorityGrouping>
 8001290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f7ff ff8e 	bl	80011b8 <NVIC_EncodePriority>
 800129c:	4602      	mov	r2, r0
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff5d 	bl	8001164 <__NVIC_SetPriority>
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff31 	bl	8001128 <__NVIC_EnableIRQ>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffa2 	bl	8001220 <SysTick_Config>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
 8001302:	e159      	b.n	80015b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001304:	2201      	movs	r2, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	429a      	cmp	r2, r3
 800131e:	f040 8148 	bne.w	80015b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d00b      	beq.n	8001342 <HAL_GPIO_Init+0x5a>
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d007      	beq.n	8001342 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001336:	2b11      	cmp	r3, #17
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b12      	cmp	r3, #18
 8001340:	d130      	bne.n	80013a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2203      	movs	r2, #3
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001378:	2201      	movs	r2, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	f003 0201 	and.w	r2, r3, #1
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0xfc>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b12      	cmp	r3, #18
 80013e2:	d123      	bne.n	800142c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	08da      	lsrs	r2, r3, #3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3208      	adds	r2, #8
 80013ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	220f      	movs	r2, #15
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	08da      	lsrs	r2, r3, #3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3208      	adds	r2, #8
 8001426:	69b9      	ldr	r1, [r7, #24]
 8001428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0203 	and.w	r2, r3, #3
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80a2 	beq.w	80015b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b56      	ldr	r3, [pc, #344]	; (80015cc <HAL_GPIO_Init+0x2e4>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a55      	ldr	r2, [pc, #340]	; (80015cc <HAL_GPIO_Init+0x2e4>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b53      	ldr	r3, [pc, #332]	; (80015cc <HAL_GPIO_Init+0x2e4>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800148a:	4a51      	ldr	r2, [pc, #324]	; (80015d0 <HAL_GPIO_Init+0x2e8>)
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	220f      	movs	r2, #15
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a48      	ldr	r2, [pc, #288]	; (80015d4 <HAL_GPIO_Init+0x2ec>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d019      	beq.n	80014ea <HAL_GPIO_Init+0x202>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a47      	ldr	r2, [pc, #284]	; (80015d8 <HAL_GPIO_Init+0x2f0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d013      	beq.n	80014e6 <HAL_GPIO_Init+0x1fe>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a46      	ldr	r2, [pc, #280]	; (80015dc <HAL_GPIO_Init+0x2f4>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d00d      	beq.n	80014e2 <HAL_GPIO_Init+0x1fa>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a45      	ldr	r2, [pc, #276]	; (80015e0 <HAL_GPIO_Init+0x2f8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d007      	beq.n	80014de <HAL_GPIO_Init+0x1f6>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a44      	ldr	r2, [pc, #272]	; (80015e4 <HAL_GPIO_Init+0x2fc>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d101      	bne.n	80014da <HAL_GPIO_Init+0x1f2>
 80014d6:	2304      	movs	r3, #4
 80014d8:	e008      	b.n	80014ec <HAL_GPIO_Init+0x204>
 80014da:	2307      	movs	r3, #7
 80014dc:	e006      	b.n	80014ec <HAL_GPIO_Init+0x204>
 80014de:	2303      	movs	r3, #3
 80014e0:	e004      	b.n	80014ec <HAL_GPIO_Init+0x204>
 80014e2:	2302      	movs	r3, #2
 80014e4:	e002      	b.n	80014ec <HAL_GPIO_Init+0x204>
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <HAL_GPIO_Init+0x204>
 80014ea:	2300      	movs	r3, #0
 80014ec:	69fa      	ldr	r2, [r7, #28]
 80014ee:	f002 0203 	and.w	r2, r2, #3
 80014f2:	0092      	lsls	r2, r2, #2
 80014f4:	4093      	lsls	r3, r2
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014fc:	4934      	ldr	r1, [pc, #208]	; (80015d0 <HAL_GPIO_Init+0x2e8>)
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	3302      	adds	r3, #2
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <HAL_GPIO_Init+0x300>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800152e:	4a2e      	ldr	r2, [pc, #184]	; (80015e8 <HAL_GPIO_Init+0x300>)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001534:	4b2c      	ldr	r3, [pc, #176]	; (80015e8 <HAL_GPIO_Init+0x300>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001558:	4a23      	ldr	r2, [pc, #140]	; (80015e8 <HAL_GPIO_Init+0x300>)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800155e:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <HAL_GPIO_Init+0x300>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001582:	4a19      	ldr	r2, [pc, #100]	; (80015e8 <HAL_GPIO_Init+0x300>)
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <HAL_GPIO_Init+0x300>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015ac:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <HAL_GPIO_Init+0x300>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3301      	adds	r3, #1
 80015b6:	61fb      	str	r3, [r7, #28]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	2b0f      	cmp	r3, #15
 80015bc:	f67f aea2 	bls.w	8001304 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c0:	bf00      	nop
 80015c2:	3724      	adds	r7, #36	; 0x24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40013800 	.word	0x40013800
 80015d4:	40020000 	.word	0x40020000
 80015d8:	40020400 	.word	0x40020400
 80015dc:	40020800 	.word	0x40020800
 80015e0:	40020c00 	.word	0x40020c00
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40013c00 	.word	0x40013c00

080015ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	887b      	ldrh	r3, [r7, #2]
 80015fe:	4013      	ands	r3, r2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d002      	beq.n	800160a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001604:	2301      	movs	r3, #1
 8001606:	73fb      	strb	r3, [r7, #15]
 8001608:	e001      	b.n	800160e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800160e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
 8001628:	4613      	mov	r3, r2
 800162a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800162c:	787b      	ldrb	r3, [r7, #1]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001632:	887a      	ldrh	r2, [r7, #2]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001638:	e003      	b.n	8001642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800163a:	887b      	ldrh	r3, [r7, #2]
 800163c:	041a      	lsls	r2, r3, #16
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	619a      	str	r2, [r3, #24]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	460b      	mov	r3, r1
 8001658:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695a      	ldr	r2, [r3, #20]
 800165e:	887b      	ldrh	r3, [r7, #2]
 8001660:	401a      	ands	r2, r3
 8001662:	887b      	ldrh	r3, [r7, #2]
 8001664:	429a      	cmp	r2, r3
 8001666:	d104      	bne.n	8001672 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001668:	887b      	ldrh	r3, [r7, #2]
 800166a:	041a      	lsls	r2, r3, #16
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001670:	e002      	b.n	8001678 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	619a      	str	r2, [r3, #24]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e11f      	b.n	80018d6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d106      	bne.n	80016b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fa6a 	bl	8000b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2224      	movs	r2, #36	; 0x24
 80016b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0201 	bic.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016e8:	f002 fb4a 	bl	8003d80 <HAL_RCC_GetPCLK1Freq>
 80016ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4a7b      	ldr	r2, [pc, #492]	; (80018e0 <HAL_I2C_Init+0x25c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d807      	bhi.n	8001708 <HAL_I2C_Init+0x84>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4a7a      	ldr	r2, [pc, #488]	; (80018e4 <HAL_I2C_Init+0x260>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	bf94      	ite	ls
 8001700:	2301      	movls	r3, #1
 8001702:	2300      	movhi	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	e006      	b.n	8001716 <HAL_I2C_Init+0x92>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4a77      	ldr	r2, [pc, #476]	; (80018e8 <HAL_I2C_Init+0x264>)
 800170c:	4293      	cmp	r3, r2
 800170e:	bf94      	ite	ls
 8001710:	2301      	movls	r3, #1
 8001712:	2300      	movhi	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e0db      	b.n	80018d6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4a72      	ldr	r2, [pc, #456]	; (80018ec <HAL_I2C_Init+0x268>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	0c9b      	lsrs	r3, r3, #18
 8001728:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4a64      	ldr	r2, [pc, #400]	; (80018e0 <HAL_I2C_Init+0x25c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d802      	bhi.n	8001758 <HAL_I2C_Init+0xd4>
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	3301      	adds	r3, #1
 8001756:	e009      	b.n	800176c <HAL_I2C_Init+0xe8>
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800175e:	fb02 f303 	mul.w	r3, r2, r3
 8001762:	4a63      	ldr	r2, [pc, #396]	; (80018f0 <HAL_I2C_Init+0x26c>)
 8001764:	fba2 2303 	umull	r2, r3, r2, r3
 8001768:	099b      	lsrs	r3, r3, #6
 800176a:	3301      	adds	r3, #1
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	430b      	orrs	r3, r1
 8001772:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800177e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	4956      	ldr	r1, [pc, #344]	; (80018e0 <HAL_I2C_Init+0x25c>)
 8001788:	428b      	cmp	r3, r1
 800178a:	d80d      	bhi.n	80017a8 <HAL_I2C_Init+0x124>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1e59      	subs	r1, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	fbb1 f3f3 	udiv	r3, r1, r3
 800179a:	3301      	adds	r3, #1
 800179c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	bf38      	it	cc
 80017a4:	2304      	movcc	r3, #4
 80017a6:	e04f      	b.n	8001848 <HAL_I2C_Init+0x1c4>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d111      	bne.n	80017d4 <HAL_I2C_Init+0x150>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	1e58      	subs	r0, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	440b      	add	r3, r1
 80017be:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c2:	3301      	adds	r3, #1
 80017c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	bf0c      	ite	eq
 80017cc:	2301      	moveq	r3, #1
 80017ce:	2300      	movne	r3, #0
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	e012      	b.n	80017fa <HAL_I2C_Init+0x176>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	1e58      	subs	r0, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6859      	ldr	r1, [r3, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	0099      	lsls	r1, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ea:	3301      	adds	r3, #1
 80017ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	bf0c      	ite	eq
 80017f4:	2301      	moveq	r3, #1
 80017f6:	2300      	movne	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_I2C_Init+0x17e>
 80017fe:	2301      	movs	r3, #1
 8001800:	e022      	b.n	8001848 <HAL_I2C_Init+0x1c4>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10e      	bne.n	8001828 <HAL_I2C_Init+0x1a4>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1e58      	subs	r0, r3, #1
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6859      	ldr	r1, [r3, #4]
 8001812:	460b      	mov	r3, r1
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	440b      	add	r3, r1
 8001818:	fbb0 f3f3 	udiv	r3, r0, r3
 800181c:	3301      	adds	r3, #1
 800181e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001826:	e00f      	b.n	8001848 <HAL_I2C_Init+0x1c4>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	1e58      	subs	r0, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6859      	ldr	r1, [r3, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	0099      	lsls	r1, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	fbb0 f3f3 	udiv	r3, r0, r3
 800183e:	3301      	adds	r3, #1
 8001840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	6809      	ldr	r1, [r1, #0]
 800184c:	4313      	orrs	r3, r2
 800184e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69da      	ldr	r2, [r3, #28]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001876:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6911      	ldr	r1, [r2, #16]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68d2      	ldr	r2, [r2, #12]
 8001882:	4311      	orrs	r1, r2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	430b      	orrs	r3, r1
 800188a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0201 	orr.w	r2, r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2220      	movs	r2, #32
 80018c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	000186a0 	.word	0x000186a0
 80018e4:	001e847f 	.word	0x001e847f
 80018e8:	003d08ff 	.word	0x003d08ff
 80018ec:	431bde83 	.word	0x431bde83
 80018f0:	10624dd3 	.word	0x10624dd3

080018f4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e128      	b.n	8001b58 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a90      	ldr	r2, [pc, #576]	; (8001b60 <HAL_I2S_Init+0x26c>)
 800191e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff f977 	bl	8000c14 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2202      	movs	r2, #2
 800192a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800193c:	f023 030f 	bic.w	r3, r3, #15
 8001940:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2202      	movs	r2, #2
 8001948:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d060      	beq.n	8001a14 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800195a:	2310      	movs	r3, #16
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	e001      	b.n	8001964 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001960:	2320      	movs	r3, #32
 8001962:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b20      	cmp	r3, #32
 800196a:	d802      	bhi.n	8001972 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001972:	2001      	movs	r0, #1
 8001974:	f002 fb08 	bl	8003f88 <HAL_RCCEx_GetPeriphCLKFreq>
 8001978:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001982:	d125      	bne.n	80019d0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d010      	beq.n	80019ae <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	fbb2 f2f3 	udiv	r2, r2, r3
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	461a      	mov	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a8:	3305      	adds	r3, #5
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	e01f      	b.n	80019ee <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	461a      	mov	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	3305      	adds	r3, #5
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	e00e      	b.n	80019ee <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	461a      	mov	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ea:	3305      	adds	r3, #5
 80019ec:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4a5c      	ldr	r2, [pc, #368]	; (8001b64 <HAL_I2S_Init+0x270>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	08db      	lsrs	r3, r3, #3
 80019f8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	085b      	lsrs	r3, r3, #1
 8001a0a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	61bb      	str	r3, [r7, #24]
 8001a12:	e003      	b.n	8001a1c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001a14:	2302      	movs	r3, #2
 8001a16:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d902      	bls.n	8001a28 <HAL_I2S_Init+0x134>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	2bff      	cmp	r3, #255	; 0xff
 8001a26:	d907      	bls.n	8001a38 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2c:	f043 0210 	orr.w	r2, r3, #16
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e08f      	b.n	8001b58 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	ea42 0103 	orr.w	r1, r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a56:	f023 030f 	bic.w	r3, r3, #15
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6851      	ldr	r1, [r2, #4]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6892      	ldr	r2, [r2, #8]
 8001a62:	4311      	orrs	r1, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	68d2      	ldr	r2, [r2, #12]
 8001a68:	4311      	orrs	r1, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6992      	ldr	r2, [r2, #24]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a7a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d161      	bne.n	8001b48 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a38      	ldr	r2, [pc, #224]	; (8001b68 <HAL_I2S_Init+0x274>)
 8001a88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a37      	ldr	r2, [pc, #220]	; (8001b6c <HAL_I2S_Init+0x278>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d101      	bne.n	8001a98 <HAL_I2S_Init+0x1a4>
 8001a94:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <HAL_I2S_Init+0x27c>)
 8001a96:	e001      	b.n	8001a9c <HAL_I2S_Init+0x1a8>
 8001a98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6812      	ldr	r2, [r2, #0]
 8001aa2:	4932      	ldr	r1, [pc, #200]	; (8001b6c <HAL_I2S_Init+0x278>)
 8001aa4:	428a      	cmp	r2, r1
 8001aa6:	d101      	bne.n	8001aac <HAL_I2S_Init+0x1b8>
 8001aa8:	4a31      	ldr	r2, [pc, #196]	; (8001b70 <HAL_I2S_Init+0x27c>)
 8001aaa:	e001      	b.n	8001ab0 <HAL_I2S_Init+0x1bc>
 8001aac:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001ab0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ab4:	f023 030f 	bic.w	r3, r3, #15
 8001ab8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a2b      	ldr	r2, [pc, #172]	; (8001b6c <HAL_I2S_Init+0x278>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d101      	bne.n	8001ac8 <HAL_I2S_Init+0x1d4>
 8001ac4:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <HAL_I2S_Init+0x27c>)
 8001ac6:	e001      	b.n	8001acc <HAL_I2S_Init+0x1d8>
 8001ac8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001acc:	2202      	movs	r2, #2
 8001ace:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <HAL_I2S_Init+0x278>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d101      	bne.n	8001ade <HAL_I2S_Init+0x1ea>
 8001ada:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <HAL_I2S_Init+0x27c>)
 8001adc:	e001      	b.n	8001ae2 <HAL_I2S_Init+0x1ee>
 8001ade:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aee:	d003      	beq.n	8001af8 <HAL_I2S_Init+0x204>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d103      	bne.n	8001b00 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	e001      	b.n	8001b04 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	b299      	uxth	r1, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001b1a:	4303      	orrs	r3, r0
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	430b      	orrs	r3, r1
 8001b20:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001b22:	4313      	orrs	r3, r2
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	897b      	ldrh	r3, [r7, #10]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b30:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a0d      	ldr	r2, [pc, #52]	; (8001b6c <HAL_I2S_Init+0x278>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d101      	bne.n	8001b40 <HAL_I2S_Init+0x24c>
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <HAL_I2S_Init+0x27c>)
 8001b3e:	e001      	b.n	8001b44 <HAL_I2S_Init+0x250>
 8001b40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b44:	897a      	ldrh	r2, [r7, #10]
 8001b46:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3720      	adds	r7, #32
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	08001c6b 	.word	0x08001c6b
 8001b64:	cccccccd 	.word	0xcccccccd
 8001b68:	08001d81 	.word	0x08001d81
 8001b6c:	40003800 	.word	0x40003800
 8001b70:	40003400 	.word	0x40003400

08001b74 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	881a      	ldrh	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	1c9a      	adds	r2, r3, #2
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10e      	bne.n	8001c04 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bf4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ffb8 	bl	8001b74 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	b292      	uxth	r2, r2
 8001c20:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c26:	1c9a      	adds	r2, r3, #2
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	3b01      	subs	r3, #1
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10e      	bne.n	8001c62 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c52:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ff93 	bl	8001b88 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d13a      	bne.n	8001cfc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d109      	bne.n	8001ca4 <I2S_IRQHandler+0x3a>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9a:	2b40      	cmp	r3, #64	; 0x40
 8001c9c:	d102      	bne.n	8001ca4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ffb4 	bl	8001c0c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001caa:	2b40      	cmp	r3, #64	; 0x40
 8001cac:	d126      	bne.n	8001cfc <I2S_IRQHandler+0x92>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0320 	and.w	r3, r3, #32
 8001cb8:	2b20      	cmp	r3, #32
 8001cba:	d11f      	bne.n	8001cfc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	f043 0202 	orr.w	r2, r3, #2
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ff50 	bl	8001b9c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d136      	bne.n	8001d76 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d109      	bne.n	8001d26 <I2S_IRQHandler+0xbc>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1c:	2b80      	cmp	r3, #128	; 0x80
 8001d1e:	d102      	bne.n	8001d26 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ff45 	bl	8001bb0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d122      	bne.n	8001d76 <I2S_IRQHandler+0x10c>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 0320 	and.w	r3, r3, #32
 8001d3a:	2b20      	cmp	r3, #32
 8001d3c:	d11b      	bne.n	8001d76 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d4c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d68:	f043 0204 	orr.w	r2, r3, #4
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff13 	bl	8001b9c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4aa2      	ldr	r2, [pc, #648]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d101      	bne.n	8001d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001d9a:	4ba2      	ldr	r3, [pc, #648]	; (8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d9c:	e001      	b.n	8001da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001d9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a9b      	ldr	r2, [pc, #620]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d101      	bne.n	8001dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001db8:	4b9a      	ldr	r3, [pc, #616]	; (8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001dba:	e001      	b.n	8001dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001dbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dcc:	d004      	beq.n	8001dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f040 8099 	bne.w	8001f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d107      	bne.n	8001df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f925 	bl	800203c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d107      	bne.n	8001e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f9c8 	bl	800219c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e12:	2b40      	cmp	r3, #64	; 0x40
 8001e14:	d13a      	bne.n	8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	f003 0320 	and.w	r3, r3, #32
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d035      	beq.n	8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a7e      	ldr	r2, [pc, #504]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d101      	bne.n	8001e2e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001e2a:	4b7e      	ldr	r3, [pc, #504]	; (8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e2c:	e001      	b.n	8001e32 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001e2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4979      	ldr	r1, [pc, #484]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e3a:	428b      	cmp	r3, r1
 8001e3c:	d101      	bne.n	8001e42 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001e3e:	4b79      	ldr	r3, [pc, #484]	; (8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e40:	e001      	b.n	8001e46 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001e42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e4a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e5a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	f043 0202 	orr.w	r2, r3, #2
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff fe88 	bl	8001b9c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	f040 80be 	bne.w	8002014 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f003 0320 	and.w	r3, r3, #32
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 80b8 	beq.w	8002014 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001eb2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a59      	ldr	r2, [pc, #356]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d101      	bne.n	8001ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001ebe:	4b59      	ldr	r3, [pc, #356]	; (8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ec0:	e001      	b.n	8001ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001ec2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4954      	ldr	r1, [pc, #336]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ece:	428b      	cmp	r3, r1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001ed2:	4b54      	ldr	r3, [pc, #336]	; (8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ed4:	e001      	b.n	8001eda <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001ed6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ede:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	f043 0204 	orr.w	r2, r3, #4
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fe4a 	bl	8001b9c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f08:	e084      	b.n	8002014 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d107      	bne.n	8001f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f8be 	bl	80020a0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d107      	bne.n	8001f3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f8fd 	bl	8002138 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f44:	2b40      	cmp	r3, #64	; 0x40
 8001f46:	d12f      	bne.n	8001fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d02a      	beq.n	8001fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f60:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a2e      	ldr	r2, [pc, #184]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d101      	bne.n	8001f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f6e:	e001      	b.n	8001f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001f70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4929      	ldr	r1, [pc, #164]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f7c:	428b      	cmp	r3, r1
 8001f7e:	d101      	bne.n	8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001f80:	4b28      	ldr	r3, [pc, #160]	; (8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f82:	e001      	b.n	8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001f84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f8c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	f043 0202 	orr.w	r2, r3, #2
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fdfa 	bl	8001b9c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d131      	bne.n	8002016 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d02c      	beq.n	8002016 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a17      	ldr	r2, [pc, #92]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d101      	bne.n	8001fca <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001fc8:	e001      	b.n	8001fce <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001fca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4912      	ldr	r1, [pc, #72]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001fd6:	428b      	cmp	r3, r1
 8001fd8:	d101      	bne.n	8001fde <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001fdc:	e001      	b.n	8001fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001fde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fe2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fe6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ff6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002004:	f043 0204 	orr.w	r2, r3, #4
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff fdc5 	bl	8001b9c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002012:	e000      	b.n	8002016 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002014:	bf00      	nop
}
 8002016:	bf00      	nop
 8002018:	3720      	adds	r7, #32
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40003800 	.word	0x40003800
 8002024:	40003400 	.word	0x40003400

08002028 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	1c99      	adds	r1, r3, #2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6251      	str	r1, [r2, #36]	; 0x24
 800204e:	881a      	ldrh	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d113      	bne.n	8002096 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800207c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002082:	b29b      	uxth	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d106      	bne.n	8002096 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ffc9 	bl	8002028 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	1c99      	adds	r1, r3, #2
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6251      	str	r1, [r2, #36]	; 0x24
 80020b2:	8819      	ldrh	r1, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1d      	ldr	r2, [pc, #116]	; (8002130 <I2SEx_TxISR_I2SExt+0x90>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d101      	bne.n	80020c2 <I2SEx_TxISR_I2SExt+0x22>
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <I2SEx_TxISR_I2SExt+0x94>)
 80020c0:	e001      	b.n	80020c6 <I2SEx_TxISR_I2SExt+0x26>
 80020c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020c6:	460a      	mov	r2, r1
 80020c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d121      	bne.n	8002126 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a12      	ldr	r2, [pc, #72]	; (8002130 <I2SEx_TxISR_I2SExt+0x90>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d101      	bne.n	80020f0 <I2SEx_TxISR_I2SExt+0x50>
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <I2SEx_TxISR_I2SExt+0x94>)
 80020ee:	e001      	b.n	80020f4 <I2SEx_TxISR_I2SExt+0x54>
 80020f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	490d      	ldr	r1, [pc, #52]	; (8002130 <I2SEx_TxISR_I2SExt+0x90>)
 80020fc:	428b      	cmp	r3, r1
 80020fe:	d101      	bne.n	8002104 <I2SEx_TxISR_I2SExt+0x64>
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <I2SEx_TxISR_I2SExt+0x94>)
 8002102:	e001      	b.n	8002108 <I2SEx_TxISR_I2SExt+0x68>
 8002104:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002108:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800210c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002112:	b29b      	uxth	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d106      	bne.n	8002126 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff81 	bl	8002028 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40003800 	.word	0x40003800
 8002134:	40003400 	.word	0x40003400

08002138 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68d8      	ldr	r0, [r3, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	1c99      	adds	r1, r3, #2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002150:	b282      	uxth	r2, r0
 8002152:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002158:	b29b      	uxth	r3, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	b29a      	uxth	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002166:	b29b      	uxth	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d113      	bne.n	8002194 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800217a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002180:	b29b      	uxth	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ff4a 	bl	8002028 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a20      	ldr	r2, [pc, #128]	; (800222c <I2SEx_RxISR_I2SExt+0x90>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d101      	bne.n	80021b2 <I2SEx_RxISR_I2SExt+0x16>
 80021ae:	4b20      	ldr	r3, [pc, #128]	; (8002230 <I2SEx_RxISR_I2SExt+0x94>)
 80021b0:	e001      	b.n	80021b6 <I2SEx_RxISR_I2SExt+0x1a>
 80021b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021b6:	68d8      	ldr	r0, [r3, #12]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	1c99      	adds	r1, r3, #2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80021c2:	b282      	uxth	r2, r0
 80021c4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021d8:	b29b      	uxth	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d121      	bne.n	8002222 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a12      	ldr	r2, [pc, #72]	; (800222c <I2SEx_RxISR_I2SExt+0x90>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d101      	bne.n	80021ec <I2SEx_RxISR_I2SExt+0x50>
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <I2SEx_RxISR_I2SExt+0x94>)
 80021ea:	e001      	b.n	80021f0 <I2SEx_RxISR_I2SExt+0x54>
 80021ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	490d      	ldr	r1, [pc, #52]	; (800222c <I2SEx_RxISR_I2SExt+0x90>)
 80021f8:	428b      	cmp	r3, r1
 80021fa:	d101      	bne.n	8002200 <I2SEx_RxISR_I2SExt+0x64>
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <I2SEx_RxISR_I2SExt+0x94>)
 80021fe:	e001      	b.n	8002204 <I2SEx_RxISR_I2SExt+0x68>
 8002200:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002204:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002208:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220e:	b29b      	uxth	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d106      	bne.n	8002222 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff ff03 	bl	8002028 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40003800 	.word	0x40003800
 8002230:	40003400 	.word	0x40003400

08002234 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002236:	b08f      	sub	sp, #60	; 0x3c
 8002238:	af0a      	add	r7, sp, #40	; 0x28
 800223a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e10f      	b.n	8002466 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d106      	bne.n	8002266 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f004 fe5b 	bl	8006f1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2203      	movs	r2, #3
 800226a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f002 f856 	bl	8004336 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	687e      	ldr	r6, [r7, #4]
 8002292:	466d      	mov	r5, sp
 8002294:	f106 0410 	add.w	r4, r6, #16
 8002298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800229c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80022a8:	1d33      	adds	r3, r6, #4
 80022aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ac:	6838      	ldr	r0, [r7, #0]
 80022ae:	f001 ff2d 	bl	800410c <USB_CoreInit>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0d0      	b.n	8002466 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f002 f844 	bl	8004358 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d0:	2300      	movs	r3, #0
 80022d2:	73fb      	strb	r3, [r7, #15]
 80022d4:	e04a      	b.n	800236c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	1a9b      	subs	r3, r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	333d      	adds	r3, #61	; 0x3d
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022ea:	7bfa      	ldrb	r2, [r7, #15]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	333c      	adds	r3, #60	; 0x3c
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	b298      	uxth	r0, r3
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	1a9b      	subs	r3, r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	3342      	adds	r3, #66	; 0x42
 8002312:	4602      	mov	r2, r0
 8002314:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002316:	7bfa      	ldrb	r2, [r7, #15]
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	333f      	adds	r3, #63	; 0x3f
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800232a:	7bfa      	ldrb	r2, [r7, #15]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	3344      	adds	r3, #68	; 0x44
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800233e:	7bfa      	ldrb	r2, [r7, #15]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	3348      	adds	r3, #72	; 0x48
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	3350      	adds	r3, #80	; 0x50
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	3301      	adds	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
 800236c:	7bfa      	ldrb	r2, [r7, #15]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	d3af      	bcc.n	80022d6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
 800237a:	e044      	b.n	8002406 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002392:	7bfa      	ldrb	r2, [r7, #15]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023be:	7bfa      	ldrb	r2, [r7, #15]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	1a9b      	subs	r3, r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023d4:	7bfa      	ldrb	r2, [r7, #15]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023ea:	7bfa      	ldrb	r2, [r7, #15]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	3301      	adds	r3, #1
 8002404:	73fb      	strb	r3, [r7, #15]
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	429a      	cmp	r2, r3
 800240e:	d3b5      	bcc.n	800237c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	603b      	str	r3, [r7, #0]
 8002416:	687e      	ldr	r6, [r7, #4]
 8002418:	466d      	mov	r5, sp
 800241a:	f106 0410 	add.w	r4, r6, #16
 800241e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002426:	e894 0003 	ldmia.w	r4, {r0, r1}
 800242a:	e885 0003 	stmia.w	r5, {r0, r1}
 800242e:	1d33      	adds	r3, r6, #4
 8002430:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002432:	6838      	ldr	r0, [r7, #0]
 8002434:	f001 ffba 	bl	80043ac <USB_DevInit>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2202      	movs	r2, #2
 8002442:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e00d      	b.n	8002466 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f003 f802 	bl	8005468 <USB_DevDisconnect>

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800246e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_PCD_Start+0x1c>
 8002486:	2302      	movs	r3, #2
 8002488:	e020      	b.n	80024cc <HAL_PCD_Start+0x5e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002496:	2b01      	cmp	r3, #1
 8002498:	d109      	bne.n	80024ae <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d005      	beq.n	80024ae <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f001 ff2e 	bl	8004314 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f002 ffb2 	bl	8005426 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024d4:	b590      	push	{r4, r7, lr}
 80024d6:	b08d      	sub	sp, #52	; 0x34
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 f870 	bl	80055d0 <USB_GetMode>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 839d 	bne.w	8002c32 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f002 ffd4 	bl	80054aa <USB_ReadInterrupts>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 8393 	beq.w	8002c30 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f002 ffcb 	bl	80054aa <USB_ReadInterrupts>
 8002514:	4603      	mov	r3, r0
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b02      	cmp	r3, #2
 800251c:	d107      	bne.n	800252e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f002 0202 	and.w	r2, r2, #2
 800252c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f002 ffb9 	bl	80054aa <USB_ReadInterrupts>
 8002538:	4603      	mov	r3, r0
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b10      	cmp	r3, #16
 8002540:	d161      	bne.n	8002606 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	699a      	ldr	r2, [r3, #24]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0210 	bic.w	r2, r2, #16
 8002550:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	f003 020f 	and.w	r2, r3, #15
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	4413      	add	r3, r2
 800256e:	3304      	adds	r3, #4
 8002570:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	0c5b      	lsrs	r3, r3, #17
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	2b02      	cmp	r3, #2
 800257c:	d124      	bne.n	80025c8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d035      	beq.n	80025f6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002594:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002598:	b29b      	uxth	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	6a38      	ldr	r0, [r7, #32]
 800259e:	f002 fe1f 	bl	80051e0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025ae:	441a      	add	r2, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	699a      	ldr	r2, [r3, #24]
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025c0:	441a      	add	r2, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	619a      	str	r2, [r3, #24]
 80025c6:	e016      	b.n	80025f6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	0c5b      	lsrs	r3, r3, #17
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	2b06      	cmp	r3, #6
 80025d2:	d110      	bne.n	80025f6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025da:	2208      	movs	r2, #8
 80025dc:	4619      	mov	r1, r3
 80025de:	6a38      	ldr	r0, [r7, #32]
 80025e0:	f002 fdfe 	bl	80051e0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	699a      	ldr	r2, [r3, #24]
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	091b      	lsrs	r3, r3, #4
 80025ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025f0:	441a      	add	r2, r3
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699a      	ldr	r2, [r3, #24]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0210 	orr.w	r2, r2, #16
 8002604:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f002 ff4d 	bl	80054aa <USB_ReadInterrupts>
 8002610:	4603      	mov	r3, r0
 8002612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002616:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800261a:	d16e      	bne.n	80026fa <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f002 ff53 	bl	80054d0 <USB_ReadDevAllOutEpInterrupt>
 800262a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800262c:	e062      	b.n	80026f4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d057      	beq.n	80026e8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f002 ff78 	bl	8005538 <USB_ReadDevOutEPInterrupt>
 8002648:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00c      	beq.n	800266e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	4413      	add	r3, r2
 800265c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002660:	461a      	mov	r2, r3
 8002662:	2301      	movs	r3, #1
 8002664:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002666:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fd99 	bl	80031a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00c      	beq.n	8002692 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	4413      	add	r3, r2
 8002680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002684:	461a      	mov	r2, r3
 8002686:	2308      	movs	r3, #8
 8002688:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800268a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 fe93 	bl	80033b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a8:	461a      	mov	r2, r3
 80026aa:	2310      	movs	r3, #16
 80026ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	f003 0320 	and.w	r3, r3, #32
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c4:	461a      	mov	r2, r3
 80026c6:	2320      	movs	r3, #32
 80026c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d009      	beq.n	80026e8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e0:	461a      	mov	r2, r3
 80026e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026e6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	3301      	adds	r3, #1
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	085b      	lsrs	r3, r3, #1
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d199      	bne.n	800262e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f002 fed3 	bl	80054aa <USB_ReadInterrupts>
 8002704:	4603      	mov	r3, r0
 8002706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800270a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800270e:	f040 80c0 	bne.w	8002892 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f002 fef4 	bl	8005504 <USB_ReadDevAllInEpInterrupt>
 800271c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002722:	e0b2      	b.n	800288a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80a7 	beq.w	800287e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f002 ff1a 	bl	8005574 <USB_ReadDevInEPInterrupt>
 8002740:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d057      	beq.n	80027fc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	2201      	movs	r2, #1
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	43db      	mvns	r3, r3
 8002766:	69f9      	ldr	r1, [r7, #28]
 8002768:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800276c:	4013      	ands	r3, r2
 800276e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	4413      	add	r3, r2
 8002778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800277c:	461a      	mov	r2, r3
 800277e:	2301      	movs	r3, #1
 8002780:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d132      	bne.n	80027f0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	1a9b      	subs	r3, r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	3348      	adds	r3, #72	; 0x48
 800279a:	6819      	ldr	r1, [r3, #0]
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4403      	add	r3, r0
 80027aa:	3344      	adds	r3, #68	; 0x44
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4419      	add	r1, r3
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b4:	4613      	mov	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4403      	add	r3, r0
 80027be:	3348      	adds	r3, #72	; 0x48
 80027c0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d113      	bne.n	80027f0 <HAL_PCD_IRQHandler+0x31c>
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	3350      	adds	r3, #80	; 0x50
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d108      	bne.n	80027f0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027e8:	461a      	mov	r2, r3
 80027ea:	2101      	movs	r1, #1
 80027ec:	f002 ff22 	bl	8005634 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	4619      	mov	r1, r3
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f004 fc1f 	bl	800703a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d008      	beq.n	8002818 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	4413      	add	r3, r2
 800280e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002812:	461a      	mov	r2, r3
 8002814:	2308      	movs	r3, #8
 8002816:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b00      	cmp	r3, #0
 8002820:	d008      	beq.n	8002834 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	4413      	add	r3, r2
 800282a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800282e:	461a      	mov	r2, r3
 8002830:	2310      	movs	r3, #16
 8002832:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283a:	2b00      	cmp	r3, #0
 800283c:	d008      	beq.n	8002850 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	4413      	add	r3, r2
 8002846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800284a:	461a      	mov	r2, r3
 800284c:	2340      	movs	r3, #64	; 0x40
 800284e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d008      	beq.n	800286c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	4413      	add	r3, r2
 8002862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002866:	461a      	mov	r2, r3
 8002868:	2302      	movs	r3, #2
 800286a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fc03 	bl	8003084 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	3301      	adds	r3, #1
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	085b      	lsrs	r3, r3, #1
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	2b00      	cmp	r3, #0
 800288e:	f47f af49 	bne.w	8002724 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f002 fe07 	bl	80054aa <USB_ReadInterrupts>
 800289c:	4603      	mov	r3, r0
 800289e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028a6:	d122      	bne.n	80028ee <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	69fa      	ldr	r2, [r7, #28]
 80028b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d108      	bne.n	80028d8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80028ce:	2100      	movs	r1, #0
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 fe0f 	bl	80034f4 <HAL_PCDEx_LPM_Callback>
 80028d6:	e002      	b.n	80028de <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f004 fc1b 	bl	8007114 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80028ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f002 fdd9 	bl	80054aa <USB_ReadInterrupts>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002902:	d112      	bne.n	800292a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b01      	cmp	r3, #1
 8002912:	d102      	bne.n	800291a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f004 fbd7 	bl	80070c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002928:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f002 fdbb 	bl	80054aa <USB_ReadInterrupts>
 8002934:	4603      	mov	r3, r0
 8002936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800293a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800293e:	f040 80c7 	bne.w	8002ad0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2110      	movs	r1, #16
 800295c:	4618      	mov	r0, r3
 800295e:	f001 fe89 	bl	8004674 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002962:	2300      	movs	r3, #0
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002966:	e056      	b.n	8002a16 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	4413      	add	r3, r2
 8002970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002974:	461a      	mov	r2, r3
 8002976:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800297a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	4413      	add	r3, r2
 8002984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800298c:	0151      	lsls	r1, r2, #5
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	440a      	add	r2, r1
 8002992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002996:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800299a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800299c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029ac:	0151      	lsls	r1, r2, #5
 80029ae:	69fa      	ldr	r2, [r7, #28]
 80029b0:	440a      	add	r2, r1
 80029b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80029bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c8:	461a      	mov	r2, r3
 80029ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029ce:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e0:	0151      	lsls	r1, r2, #5
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	440a      	add	r2, r1
 80029e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80029f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a00:	0151      	lsls	r1, r2, #5
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	440a      	add	r2, r1
 8002a06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a0e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a12:	3301      	adds	r3, #1
 8002a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d3a3      	bcc.n	8002968 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	69fa      	ldr	r2, [r7, #28]
 8002a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a2e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a32:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d016      	beq.n	8002a6a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a4c:	f043 030b 	orr.w	r3, r3, #11
 8002a50:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a62:	f043 030b 	orr.w	r3, r3, #11
 8002a66:	6453      	str	r3, [r2, #68]	; 0x44
 8002a68:	e015      	b.n	8002a96 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a7c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a80:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a90:	f043 030b 	orr.w	r3, r3, #11
 8002a94:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002aa8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002aba:	461a      	mov	r2, r3
 8002abc:	f002 fdba 	bl	8005634 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695a      	ldr	r2, [r3, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f002 fce8 	bl	80054aa <USB_ReadInterrupts>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae4:	d124      	bne.n	8002b30 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f002 fd7e 	bl	80055ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f001 fe1e 	bl	8004736 <USB_GetDevSpeed>
 8002afa:	4603      	mov	r3, r0
 8002afc:	461a      	mov	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681c      	ldr	r4, [r3, #0]
 8002b06:	f001 f92f 	bl	8003d68 <HAL_RCC_GetHCLKFreq>
 8002b0a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	4620      	mov	r0, r4
 8002b16:	f001 fb5b 	bl	80041d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f004 fab5 	bl	800708a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695a      	ldr	r2, [r3, #20]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f002 fcb8 	bl	80054aa <USB_ReadInterrupts>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d10a      	bne.n	8002b5a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f004 fa92 	bl	800706e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695a      	ldr	r2, [r3, #20]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f002 0208 	and.w	r2, r2, #8
 8002b58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f002 fca3 	bl	80054aa <USB_ReadInterrupts>
 8002b64:	4603      	mov	r3, r0
 8002b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b6e:	d10f      	bne.n	8002b90 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	4619      	mov	r1, r3
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f004 faea 	bl	8007154 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f002 fc88 	bl	80054aa <USB_ReadInterrupts>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ba4:	d10f      	bne.n	8002bc6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	4619      	mov	r1, r3
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f004 fabd 	bl	8007130 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f002 fc6d 	bl	80054aa <USB_ReadInterrupts>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bda:	d10a      	bne.n	8002bf2 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f004 facb 	bl	8007178 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f002 fc57 	bl	80054aa <USB_ReadInterrupts>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d115      	bne.n	8002c32 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f004 fabb 	bl	8007194 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	e000      	b.n	8002c32 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002c30:	bf00      	nop
    }
  }
}
 8002c32:	3734      	adds	r7, #52	; 0x34
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd90      	pop	{r4, r7, pc}

08002c38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_PCD_SetAddress+0x1a>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e013      	b.n	8002c7a <HAL_PCD_SetAddress+0x42>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f002 fbb5 	bl	80053da <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	4608      	mov	r0, r1
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4603      	mov	r3, r0
 8002c92:	70fb      	strb	r3, [r7, #3]
 8002c94:	460b      	mov	r3, r1
 8002c96:	803b      	strh	r3, [r7, #0]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	da0f      	bge.n	8002cc8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	f003 020f 	and.w	r2, r3, #15
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	3338      	adds	r3, #56	; 0x38
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	4413      	add	r3, r2
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	705a      	strb	r2, [r3, #1]
 8002cc6:	e00f      	b.n	8002ce8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	f003 020f 	and.w	r2, r3, #15
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	3304      	adds	r3, #4
 8002ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ce8:	78fb      	ldrb	r3, [r7, #3]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cf4:	883a      	ldrh	r2, [r7, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	78ba      	ldrb	r2, [r7, #2]
 8002cfe:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	785b      	ldrb	r3, [r3, #1]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d004      	beq.n	8002d12 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d12:	78bb      	ldrb	r3, [r7, #2]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d102      	bne.n	8002d1e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_PCD_EP_Open+0xaa>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e00e      	b.n	8002d4a <HAL_PCD_EP_Open+0xc8>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68f9      	ldr	r1, [r7, #12]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f001 fd20 	bl	8004780 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002d48:	7afb      	ldrb	r3, [r7, #11]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	da0f      	bge.n	8002d86 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	f003 020f 	and.w	r2, r3, #15
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	3338      	adds	r3, #56	; 0x38
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	705a      	strb	r2, [r3, #1]
 8002d84:	e00f      	b.n	8002da6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d86:	78fb      	ldrb	r3, [r7, #3]
 8002d88:	f003 020f 	and.w	r2, r3, #15
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_PCD_EP_Close+0x6e>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e00e      	b.n	8002dde <HAL_PCD_EP_Close+0x8c>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68f9      	ldr	r1, [r7, #12]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f001 fd5e 	bl	8004890 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b086      	sub	sp, #24
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	603b      	str	r3, [r7, #0]
 8002df2:	460b      	mov	r3, r1
 8002df4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002df6:	7afb      	ldrb	r3, [r7, #11]
 8002df8:	f003 020f 	and.w	r2, r3, #15
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	1a9b      	subs	r3, r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2200      	movs	r2, #0
 8002e26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e28:	7afb      	ldrb	r3, [r7, #11]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d102      	bne.n	8002e42 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e42:	7afb      	ldrb	r3, [r7, #11]
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d109      	bne.n	8002e60 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	6979      	ldr	r1, [r7, #20]
 8002e5a:	f002 f839 	bl	8004ed0 <USB_EP0StartXfer>
 8002e5e:	e008      	b.n	8002e72 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	6979      	ldr	r1, [r7, #20]
 8002e6e:	f001 fdeb 	bl	8004a48 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e8c:	7afb      	ldrb	r3, [r7, #11]
 8002e8e:	f003 020f 	and.w	r2, r3, #15
 8002e92:	4613      	mov	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	3338      	adds	r3, #56	; 0x38
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ebc:	7afb      	ldrb	r3, [r7, #11]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d102      	bne.n	8002ed6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ed6:	7afb      	ldrb	r3, [r7, #11]
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d109      	bne.n	8002ef4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	6979      	ldr	r1, [r7, #20]
 8002eee:	f001 ffef 	bl	8004ed0 <USB_EP0StartXfer>
 8002ef2:	e008      	b.n	8002f06 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	461a      	mov	r2, r3
 8002f00:	6979      	ldr	r1, [r7, #20]
 8002f02:	f001 fda1 	bl	8004a48 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	f003 020f 	and.w	r2, r3, #15
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d901      	bls.n	8002f2e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e050      	b.n	8002fd0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	da0f      	bge.n	8002f56 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f36:	78fb      	ldrb	r3, [r7, #3]
 8002f38:	f003 020f 	and.w	r2, r3, #15
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	3338      	adds	r3, #56	; 0x38
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	705a      	strb	r2, [r3, #1]
 8002f54:	e00d      	b.n	8002f72 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	4413      	add	r3, r2
 8002f68:	3304      	adds	r3, #4
 8002f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_PCD_EP_SetStall+0x82>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e01e      	b.n	8002fd0 <HAL_PCD_EP_SetStall+0xc0>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68f9      	ldr	r1, [r7, #12]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f002 f946 	bl	8005232 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fa6:	78fb      	ldrb	r3, [r7, #3]
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10a      	bne.n	8002fc6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6818      	ldr	r0, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	b2d9      	uxtb	r1, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	f002 fb37 	bl	8005634 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	f003 020f 	and.w	r2, r3, #15
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d901      	bls.n	8002ff6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e042      	b.n	800307c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ff6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	da0f      	bge.n	800301e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	f003 020f 	and.w	r2, r3, #15
 8003004:	4613      	mov	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	3338      	adds	r3, #56	; 0x38
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	4413      	add	r3, r2
 8003012:	3304      	adds	r3, #4
 8003014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	705a      	strb	r2, [r3, #1]
 800301c:	e00f      	b.n	800303e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	f003 020f 	and.w	r2, r3, #15
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	4413      	add	r3, r2
 8003034:	3304      	adds	r3, #4
 8003036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	b2da      	uxtb	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_PCD_EP_ClrStall+0x86>
 800305a:	2302      	movs	r3, #2
 800305c:	e00e      	b.n	800307c <HAL_PCD_EP_ClrStall+0xa4>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68f9      	ldr	r1, [r7, #12]
 800306c:	4618      	mov	r0, r3
 800306e:	f002 f94e 	bl	800530e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	; 0x28
 8003088:	af02      	add	r7, sp, #8
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	4613      	mov	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	3338      	adds	r3, #56	; 0x38
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	4413      	add	r3, r2
 80030a8:	3304      	adds	r3, #4
 80030aa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	699a      	ldr	r2, [r3, #24]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d901      	bls.n	80030bc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e06c      	b.n	8003196 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d902      	bls.n	80030d8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	3303      	adds	r3, #3
 80030dc:	089b      	lsrs	r3, r3, #2
 80030de:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030e0:	e02b      	b.n	800313a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	695a      	ldr	r2, [r3, #20]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d902      	bls.n	80030fe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3303      	adds	r3, #3
 8003102:	089b      	lsrs	r3, r3, #2
 8003104:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	68d9      	ldr	r1, [r3, #12]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	b2da      	uxtb	r2, r3
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003116:	b2db      	uxtb	r3, r3
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	4603      	mov	r3, r0
 800311c:	6978      	ldr	r0, [r7, #20]
 800311e:	f002 f82a 	bl	8005176 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	441a      	add	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	441a      	add	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4413      	add	r3, r2
 8003142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	b29b      	uxth	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	429a      	cmp	r2, r3
 800314e:	d809      	bhi.n	8003164 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	699a      	ldr	r2, [r3, #24]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003158:	429a      	cmp	r2, r3
 800315a:	d203      	bcs.n	8003164 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1be      	bne.n	80030e2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	429a      	cmp	r2, r3
 800316e:	d811      	bhi.n	8003194 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	2201      	movs	r2, #1
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	43db      	mvns	r3, r3
 800318a:	6939      	ldr	r1, [r7, #16]
 800318c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003190:	4013      	ands	r3, r2
 8003192:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	333c      	adds	r3, #60	; 0x3c
 80031b8:	3304      	adds	r3, #4
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	f040 80a0 	bne.w	8003318 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d015      	beq.n	800320e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4a72      	ldr	r2, [pc, #456]	; (80033b0 <PCD_EP_OutXfrComplete_int+0x210>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	f240 80dd 	bls.w	80033a6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 80d7 	beq.w	80033a6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003204:	461a      	mov	r2, r3
 8003206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800320a:	6093      	str	r3, [r2, #8]
 800320c:	e0cb      	b.n	80033a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	d009      	beq.n	800322c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4413      	add	r3, r2
 8003220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003224:	461a      	mov	r2, r3
 8003226:	2320      	movs	r3, #32
 8003228:	6093      	str	r3, [r2, #8]
 800322a:	e0bc      	b.n	80033a6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003232:	2b00      	cmp	r3, #0
 8003234:	f040 80b7 	bne.w	80033a6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a5d      	ldr	r2, [pc, #372]	; (80033b0 <PCD_EP_OutXfrComplete_int+0x210>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d90f      	bls.n	8003260 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4413      	add	r3, r2
 8003252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003256:	461a      	mov	r2, r3
 8003258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800325c:	6093      	str	r3, [r2, #8]
 800325e:	e0a2      	b.n	80033a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003272:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	0159      	lsls	r1, r3, #5
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	440b      	add	r3, r1
 800327c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003286:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4403      	add	r3, r0
 8003296:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800329a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032ae:	6819      	ldr	r1, [r3, #0]
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4403      	add	r3, r0
 80032be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4419      	add	r1, r3
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	4613      	mov	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	1a9b      	subs	r3, r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4403      	add	r3, r0
 80032d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032d8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d114      	bne.n	800330a <PCD_EP_OutXfrComplete_int+0x16a>
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	4613      	mov	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d108      	bne.n	800330a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003302:	461a      	mov	r2, r3
 8003304:	2101      	movs	r1, #1
 8003306:	f002 f995 	bl	8005634 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	4619      	mov	r1, r3
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f003 fe77 	bl	8007004 <HAL_PCD_DataOutStageCallback>
 8003316:	e046      	b.n	80033a6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4a26      	ldr	r2, [pc, #152]	; (80033b4 <PCD_EP_OutXfrComplete_int+0x214>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d124      	bne.n	800336a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003336:	461a      	mov	r2, r3
 8003338:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800333c:	6093      	str	r3, [r2, #8]
 800333e:	e032      	b.n	80033a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b00      	cmp	r3, #0
 8003348:	d008      	beq.n	800335c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4413      	add	r3, r2
 8003352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003356:	461a      	mov	r2, r3
 8003358:	2320      	movs	r3, #32
 800335a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	4619      	mov	r1, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f003 fe4e 	bl	8007004 <HAL_PCD_DataOutStageCallback>
 8003368:	e01d      	b.n	80033a6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d114      	bne.n	800339a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	4613      	mov	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d108      	bne.n	800339a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003392:	461a      	mov	r2, r3
 8003394:	2100      	movs	r1, #0
 8003396:	f002 f94d 	bl	8005634 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	4619      	mov	r1, r3
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f003 fe2f 	bl	8007004 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	4f54300a 	.word	0x4f54300a
 80033b4:	4f54310a 	.word	0x4f54310a

080033b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	333c      	adds	r3, #60	; 0x3c
 80033d0:	3304      	adds	r3, #4
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4a15      	ldr	r2, [pc, #84]	; (8003440 <PCD_EP_OutSetupPacket_int+0x88>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d90e      	bls.n	800340c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d009      	beq.n	800340c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003404:	461a      	mov	r2, r3
 8003406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800340a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f003 fde7 	bl	8006fe0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4a0a      	ldr	r2, [pc, #40]	; (8003440 <PCD_EP_OutSetupPacket_int+0x88>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d90c      	bls.n	8003434 <PCD_EP_OutSetupPacket_int+0x7c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d108      	bne.n	8003434 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800342c:	461a      	mov	r2, r3
 800342e:	2101      	movs	r1, #1
 8003430:	f002 f900 	bl	8005634 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	4f54300a 	.word	0x4f54300a

08003444 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	70fb      	strb	r3, [r7, #3]
 8003450:	4613      	mov	r3, r2
 8003452:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d107      	bne.n	8003472 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003462:	883b      	ldrh	r3, [r7, #0]
 8003464:	0419      	lsls	r1, r3, #16
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	430a      	orrs	r2, r1
 800346e:	629a      	str	r2, [r3, #40]	; 0x28
 8003470:	e028      	b.n	80034c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	4413      	add	r3, r2
 800347e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003480:	2300      	movs	r3, #0
 8003482:	73fb      	strb	r3, [r7, #15]
 8003484:	e00d      	b.n	80034a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	3340      	adds	r3, #64	; 0x40
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	0c1b      	lsrs	r3, r3, #16
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	4413      	add	r3, r2
 800349a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	3301      	adds	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
 80034a2:	7bfa      	ldrb	r2, [r7, #15]
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d3ec      	bcc.n	8003486 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034ac:	883b      	ldrh	r3, [r7, #0]
 80034ae:	0418      	lsls	r0, r3, #16
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6819      	ldr	r1, [r3, #0]
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	4302      	orrs	r2, r0
 80034bc:	3340      	adds	r3, #64	; 0x40
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	460b      	mov	r3, r1
 80034dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	887a      	ldrh	r2, [r7, #2]
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e25b      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d075      	beq.n	8003616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800352a:	4ba3      	ldr	r3, [pc, #652]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b04      	cmp	r3, #4
 8003534:	d00c      	beq.n	8003550 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003536:	4ba0      	ldr	r3, [pc, #640]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800353e:	2b08      	cmp	r3, #8
 8003540:	d112      	bne.n	8003568 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003542:	4b9d      	ldr	r3, [pc, #628]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800354e:	d10b      	bne.n	8003568 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003550:	4b99      	ldr	r3, [pc, #612]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d05b      	beq.n	8003614 <HAL_RCC_OscConfig+0x108>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d157      	bne.n	8003614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e236      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003570:	d106      	bne.n	8003580 <HAL_RCC_OscConfig+0x74>
 8003572:	4b91      	ldr	r3, [pc, #580]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a90      	ldr	r2, [pc, #576]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e01d      	b.n	80035bc <HAL_RCC_OscConfig+0xb0>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003588:	d10c      	bne.n	80035a4 <HAL_RCC_OscConfig+0x98>
 800358a:	4b8b      	ldr	r3, [pc, #556]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a8a      	ldr	r2, [pc, #552]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	4b88      	ldr	r3, [pc, #544]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a87      	ldr	r2, [pc, #540]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e00b      	b.n	80035bc <HAL_RCC_OscConfig+0xb0>
 80035a4:	4b84      	ldr	r3, [pc, #528]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a83      	ldr	r2, [pc, #524]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80035aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	4b81      	ldr	r3, [pc, #516]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a80      	ldr	r2, [pc, #512]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80035b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d013      	beq.n	80035ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fd fd50 	bl	8001068 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035cc:	f7fd fd4c 	bl	8001068 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e1fb      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b76      	ldr	r3, [pc, #472]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0xc0>
 80035ea:	e014      	b.n	8003616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fd fd3c 	bl	8001068 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f4:	f7fd fd38 	bl	8001068 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	; 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e1e7      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003606:	4b6c      	ldr	r3, [pc, #432]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0xe8>
 8003612:	e000      	b.n	8003616 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d063      	beq.n	80036ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003622:	4b65      	ldr	r3, [pc, #404]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00b      	beq.n	8003646 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800362e:	4b62      	ldr	r3, [pc, #392]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003636:	2b08      	cmp	r3, #8
 8003638:	d11c      	bne.n	8003674 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363a:	4b5f      	ldr	r3, [pc, #380]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d116      	bne.n	8003674 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003646:	4b5c      	ldr	r3, [pc, #368]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_RCC_OscConfig+0x152>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d001      	beq.n	800365e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e1bb      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365e:	4b56      	ldr	r3, [pc, #344]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4952      	ldr	r1, [pc, #328]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003672:	e03a      	b.n	80036ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d020      	beq.n	80036be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800367c:	4b4f      	ldr	r3, [pc, #316]	; (80037bc <HAL_RCC_OscConfig+0x2b0>)
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7fd fcf1 	bl	8001068 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800368a:	f7fd fced 	bl	8001068 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e19c      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369c:	4b46      	ldr	r3, [pc, #280]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a8:	4b43      	ldr	r3, [pc, #268]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4940      	ldr	r1, [pc, #256]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]
 80036bc:	e015      	b.n	80036ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036be:	4b3f      	ldr	r3, [pc, #252]	; (80037bc <HAL_RCC_OscConfig+0x2b0>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7fd fcd0 	bl	8001068 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036cc:	f7fd fccc 	bl	8001068 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e17b      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036de:	4b36      	ldr	r3, [pc, #216]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d030      	beq.n	8003758 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d016      	beq.n	800372c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fe:	4b30      	ldr	r3, [pc, #192]	; (80037c0 <HAL_RCC_OscConfig+0x2b4>)
 8003700:	2201      	movs	r2, #1
 8003702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003704:	f7fd fcb0 	bl	8001068 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800370c:	f7fd fcac 	bl	8001068 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e15b      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371e:	4b26      	ldr	r3, [pc, #152]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0x200>
 800372a:	e015      	b.n	8003758 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800372c:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <HAL_RCC_OscConfig+0x2b4>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003732:	f7fd fc99 	bl	8001068 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800373a:	f7fd fc95 	bl	8001068 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e144      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800374c:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800374e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f0      	bne.n	800373a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80a0 	beq.w	80038a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003766:	2300      	movs	r3, #0
 8003768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800376a:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10f      	bne.n	8003796 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	4a0e      	ldr	r2, [pc, #56]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003784:	6413      	str	r3, [r2, #64]	; 0x40
 8003786:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003792:	2301      	movs	r3, #1
 8003794:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003796:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <HAL_RCC_OscConfig+0x2b8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d121      	bne.n	80037e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037a2:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <HAL_RCC_OscConfig+0x2b8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a07      	ldr	r2, [pc, #28]	; (80037c4 <HAL_RCC_OscConfig+0x2b8>)
 80037a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ae:	f7fd fc5b 	bl	8001068 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	e011      	b.n	80037da <HAL_RCC_OscConfig+0x2ce>
 80037b6:	bf00      	nop
 80037b8:	40023800 	.word	0x40023800
 80037bc:	42470000 	.word	0x42470000
 80037c0:	42470e80 	.word	0x42470e80
 80037c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c8:	f7fd fc4e 	bl	8001068 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e0fd      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037da:	4b81      	ldr	r3, [pc, #516]	; (80039e0 <HAL_RCC_OscConfig+0x4d4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0f0      	beq.n	80037c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d106      	bne.n	80037fc <HAL_RCC_OscConfig+0x2f0>
 80037ee:	4b7d      	ldr	r3, [pc, #500]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 80037f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f2:	4a7c      	ldr	r2, [pc, #496]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	6713      	str	r3, [r2, #112]	; 0x70
 80037fa:	e01c      	b.n	8003836 <HAL_RCC_OscConfig+0x32a>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b05      	cmp	r3, #5
 8003802:	d10c      	bne.n	800381e <HAL_RCC_OscConfig+0x312>
 8003804:	4b77      	ldr	r3, [pc, #476]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003808:	4a76      	ldr	r2, [pc, #472]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 800380a:	f043 0304 	orr.w	r3, r3, #4
 800380e:	6713      	str	r3, [r2, #112]	; 0x70
 8003810:	4b74      	ldr	r3, [pc, #464]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003814:	4a73      	ldr	r2, [pc, #460]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	6713      	str	r3, [r2, #112]	; 0x70
 800381c:	e00b      	b.n	8003836 <HAL_RCC_OscConfig+0x32a>
 800381e:	4b71      	ldr	r3, [pc, #452]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003822:	4a70      	ldr	r2, [pc, #448]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	6713      	str	r3, [r2, #112]	; 0x70
 800382a:	4b6e      	ldr	r3, [pc, #440]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	4a6d      	ldr	r2, [pc, #436]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003830:	f023 0304 	bic.w	r3, r3, #4
 8003834:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d015      	beq.n	800386a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383e:	f7fd fc13 	bl	8001068 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003844:	e00a      	b.n	800385c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003846:	f7fd fc0f 	bl	8001068 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	f241 3288 	movw	r2, #5000	; 0x1388
 8003854:	4293      	cmp	r3, r2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e0bc      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385c:	4b61      	ldr	r3, [pc, #388]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0ee      	beq.n	8003846 <HAL_RCC_OscConfig+0x33a>
 8003868:	e014      	b.n	8003894 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800386a:	f7fd fbfd 	bl	8001068 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003870:	e00a      	b.n	8003888 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003872:	f7fd fbf9 	bl	8001068 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003880:	4293      	cmp	r3, r2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e0a6      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003888:	4b56      	ldr	r3, [pc, #344]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1ee      	bne.n	8003872 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003894:	7dfb      	ldrb	r3, [r7, #23]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d105      	bne.n	80038a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389a:	4b52      	ldr	r3, [pc, #328]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	4a51      	ldr	r2, [pc, #324]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 80038a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 8092 	beq.w	80039d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038b0:	4b4c      	ldr	r3, [pc, #304]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 030c 	and.w	r3, r3, #12
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d05c      	beq.n	8003976 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d141      	bne.n	8003948 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c4:	4b48      	ldr	r3, [pc, #288]	; (80039e8 <HAL_RCC_OscConfig+0x4dc>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ca:	f7fd fbcd 	bl	8001068 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d2:	f7fd fbc9 	bl	8001068 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e078      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e4:	4b3f      	ldr	r3, [pc, #252]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f0      	bne.n	80038d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	019b      	lsls	r3, r3, #6
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	085b      	lsrs	r3, r3, #1
 8003908:	3b01      	subs	r3, #1
 800390a:	041b      	lsls	r3, r3, #16
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	061b      	lsls	r3, r3, #24
 8003914:	4933      	ldr	r1, [pc, #204]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003916:	4313      	orrs	r3, r2
 8003918:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800391a:	4b33      	ldr	r3, [pc, #204]	; (80039e8 <HAL_RCC_OscConfig+0x4dc>)
 800391c:	2201      	movs	r2, #1
 800391e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fd fba2 	bl	8001068 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003928:	f7fd fb9e 	bl	8001068 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e04d      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393a:	4b2a      	ldr	r3, [pc, #168]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x41c>
 8003946:	e045      	b.n	80039d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003948:	4b27      	ldr	r3, [pc, #156]	; (80039e8 <HAL_RCC_OscConfig+0x4dc>)
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394e:	f7fd fb8b 	bl	8001068 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003956:	f7fd fb87 	bl	8001068 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e036      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003968:	4b1e      	ldr	r3, [pc, #120]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f0      	bne.n	8003956 <HAL_RCC_OscConfig+0x44a>
 8003974:	e02e      	b.n	80039d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e029      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003982:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	429a      	cmp	r2, r3
 8003994:	d11c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d115      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039aa:	4013      	ands	r3, r2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d10d      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d106      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40007000 	.word	0x40007000
 80039e4:	40023800 	.word	0x40023800
 80039e8:	42470060 	.word	0x42470060

080039ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0cc      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a00:	4b68      	ldr	r3, [pc, #416]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d90c      	bls.n	8003a28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0e:	4b65      	ldr	r3, [pc, #404]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a16:	4b63      	ldr	r3, [pc, #396]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0b8      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d020      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a40:	4b59      	ldr	r3, [pc, #356]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4a58      	ldr	r2, [pc, #352]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a58:	4b53      	ldr	r3, [pc, #332]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	4a52      	ldr	r2, [pc, #328]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a64:	4b50      	ldr	r3, [pc, #320]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	494d      	ldr	r1, [pc, #308]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d044      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d107      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	4b47      	ldr	r3, [pc, #284]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d119      	bne.n	8003aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e07f      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d003      	beq.n	8003aaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d107      	bne.n	8003aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aaa:	4b3f      	ldr	r3, [pc, #252]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e06f      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aba:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e067      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aca:	4b37      	ldr	r3, [pc, #220]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f023 0203 	bic.w	r2, r3, #3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4934      	ldr	r1, [pc, #208]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003adc:	f7fd fac4 	bl	8001068 <HAL_GetTick>
 8003ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	e00a      	b.n	8003afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae4:	f7fd fac0 	bl	8001068 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e04f      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afa:	4b2b      	ldr	r3, [pc, #172]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 020c 	and.w	r2, r3, #12
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d1eb      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b0c:	4b25      	ldr	r3, [pc, #148]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 030f 	and.w	r3, r3, #15
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d20c      	bcs.n	8003b34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1a:	4b22      	ldr	r3, [pc, #136]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b22:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e032      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b40:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4916      	ldr	r1, [pc, #88]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d009      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b5e:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	490e      	ldr	r1, [pc, #56]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b72:	f000 f821 	bl	8003bb8 <HAL_RCC_GetSysClockFreq>
 8003b76:	4601      	mov	r1, r0
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	4a0a      	ldr	r2, [pc, #40]	; (8003bac <HAL_RCC_ClockConfig+0x1c0>)
 8003b84:	5cd3      	ldrb	r3, [r2, r3]
 8003b86:	fa21 f303 	lsr.w	r3, r1, r3
 8003b8a:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b8e:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fd fa24 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40023c00 	.word	0x40023c00
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	08007750 	.word	0x08007750
 8003bb0:	20000010 	.word	0x20000010
 8003bb4:	20000014 	.word	0x20000014

08003bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	607b      	str	r3, [r7, #4]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bce:	4b63      	ldr	r3, [pc, #396]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d007      	beq.n	8003bea <HAL_RCC_GetSysClockFreq+0x32>
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d008      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x38>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f040 80b4 	bne.w	8003d4c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be4:	4b5e      	ldr	r3, [pc, #376]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003be6:	60bb      	str	r3, [r7, #8]
       break;
 8003be8:	e0b3      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bea:	4b5e      	ldr	r3, [pc, #376]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003bec:	60bb      	str	r3, [r7, #8]
      break;
 8003bee:	e0b0      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bf0:	4b5a      	ldr	r3, [pc, #360]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bf8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bfa:	4b58      	ldr	r3, [pc, #352]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d04a      	beq.n	8003c9c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c06:	4b55      	ldr	r3, [pc, #340]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	099b      	lsrs	r3, r3, #6
 8003c0c:	f04f 0400 	mov.w	r4, #0
 8003c10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	ea03 0501 	and.w	r5, r3, r1
 8003c1c:	ea04 0602 	and.w	r6, r4, r2
 8003c20:	4629      	mov	r1, r5
 8003c22:	4632      	mov	r2, r6
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	f04f 0400 	mov.w	r4, #0
 8003c2c:	0154      	lsls	r4, r2, #5
 8003c2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c32:	014b      	lsls	r3, r1, #5
 8003c34:	4619      	mov	r1, r3
 8003c36:	4622      	mov	r2, r4
 8003c38:	1b49      	subs	r1, r1, r5
 8003c3a:	eb62 0206 	sbc.w	r2, r2, r6
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	f04f 0400 	mov.w	r4, #0
 8003c46:	0194      	lsls	r4, r2, #6
 8003c48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c4c:	018b      	lsls	r3, r1, #6
 8003c4e:	1a5b      	subs	r3, r3, r1
 8003c50:	eb64 0402 	sbc.w	r4, r4, r2
 8003c54:	f04f 0100 	mov.w	r1, #0
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	00e2      	lsls	r2, r4, #3
 8003c5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c62:	00d9      	lsls	r1, r3, #3
 8003c64:	460b      	mov	r3, r1
 8003c66:	4614      	mov	r4, r2
 8003c68:	195b      	adds	r3, r3, r5
 8003c6a:	eb44 0406 	adc.w	r4, r4, r6
 8003c6e:	f04f 0100 	mov.w	r1, #0
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	0262      	lsls	r2, r4, #9
 8003c78:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003c7c:	0259      	lsls	r1, r3, #9
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4614      	mov	r4, r2
 8003c82:	4618      	mov	r0, r3
 8003c84:	4621      	mov	r1, r4
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f04f 0400 	mov.w	r4, #0
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4623      	mov	r3, r4
 8003c90:	f7fc faa2 	bl	80001d8 <__aeabi_uldivmod>
 8003c94:	4603      	mov	r3, r0
 8003c96:	460c      	mov	r4, r1
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	e049      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c9c:	4b2f      	ldr	r3, [pc, #188]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	099b      	lsrs	r3, r3, #6
 8003ca2:	f04f 0400 	mov.w	r4, #0
 8003ca6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	ea03 0501 	and.w	r5, r3, r1
 8003cb2:	ea04 0602 	and.w	r6, r4, r2
 8003cb6:	4629      	mov	r1, r5
 8003cb8:	4632      	mov	r2, r6
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	f04f 0400 	mov.w	r4, #0
 8003cc2:	0154      	lsls	r4, r2, #5
 8003cc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003cc8:	014b      	lsls	r3, r1, #5
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4622      	mov	r2, r4
 8003cce:	1b49      	subs	r1, r1, r5
 8003cd0:	eb62 0206 	sbc.w	r2, r2, r6
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	f04f 0400 	mov.w	r4, #0
 8003cdc:	0194      	lsls	r4, r2, #6
 8003cde:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ce2:	018b      	lsls	r3, r1, #6
 8003ce4:	1a5b      	subs	r3, r3, r1
 8003ce6:	eb64 0402 	sbc.w	r4, r4, r2
 8003cea:	f04f 0100 	mov.w	r1, #0
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	00e2      	lsls	r2, r4, #3
 8003cf4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003cf8:	00d9      	lsls	r1, r3, #3
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4614      	mov	r4, r2
 8003cfe:	195b      	adds	r3, r3, r5
 8003d00:	eb44 0406 	adc.w	r4, r4, r6
 8003d04:	f04f 0100 	mov.w	r1, #0
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	02a2      	lsls	r2, r4, #10
 8003d0e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d12:	0299      	lsls	r1, r3, #10
 8003d14:	460b      	mov	r3, r1
 8003d16:	4614      	mov	r4, r2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f04f 0400 	mov.w	r4, #0
 8003d22:	461a      	mov	r2, r3
 8003d24:	4623      	mov	r3, r4
 8003d26:	f7fc fa57 	bl	80001d8 <__aeabi_uldivmod>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	460c      	mov	r4, r1
 8003d2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d30:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	0c1b      	lsrs	r3, r3, #16
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	60bb      	str	r3, [r7, #8]
      break;
 8003d4a:	e002      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d4c:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d4e:	60bb      	str	r3, [r7, #8]
      break;
 8003d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d52:	68bb      	ldr	r3, [r7, #8]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	00f42400 	.word	0x00f42400
 8003d64:	007a1200 	.word	0x007a1200

08003d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d6c:	4b03      	ldr	r3, [pc, #12]	; (8003d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	20000010 	.word	0x20000010

08003d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d84:	f7ff fff0 	bl	8003d68 <HAL_RCC_GetHCLKFreq>
 8003d88:	4601      	mov	r1, r0
 8003d8a:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	0a9b      	lsrs	r3, r3, #10
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	4a03      	ldr	r2, [pc, #12]	; (8003da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d96:	5cd3      	ldrb	r3, [r2, r3]
 8003d98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40023800 	.word	0x40023800
 8003da4:	08007760 	.word	0x08007760

08003da8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d105      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d038      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003dd0:	4b68      	ldr	r3, [pc, #416]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dd6:	f7fd f947 	bl	8001068 <HAL_GetTick>
 8003dda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003dde:	f7fd f943 	bl	8001068 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e0bd      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003df0:	4b61      	ldr	r3, [pc, #388]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f0      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	019b      	lsls	r3, r3, #6
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	071b      	lsls	r3, r3, #28
 8003e0e:	495a      	ldr	r1, [pc, #360]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e16:	4b57      	ldr	r3, [pc, #348]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e18:	2201      	movs	r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e1c:	f7fd f924 	bl	8001068 <HAL_GetTick>
 8003e20:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e24:	f7fd f920 	bl	8001068 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e09a      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e36:	4b50      	ldr	r3, [pc, #320]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f0      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 8083 	beq.w	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e50:	2300      	movs	r3, #0
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	4b48      	ldr	r3, [pc, #288]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	4a47      	ldr	r2, [pc, #284]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8003e60:	4b45      	ldr	r3, [pc, #276]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e6c:	4b43      	ldr	r3, [pc, #268]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a42      	ldr	r2, [pc, #264]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e76:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e78:	f7fd f8f6 	bl	8001068 <HAL_GetTick>
 8003e7c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e80:	f7fd f8f2 	bl	8001068 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e06c      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e92:	4b3a      	ldr	r3, [pc, #232]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e9e:	4b36      	ldr	r3, [pc, #216]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d02f      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d028      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ebc:	4b2e      	ldr	r3, [pc, #184]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ec6:	4b2e      	ldr	r3, [pc, #184]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ec8:	2201      	movs	r2, #1
 8003eca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ecc:	4b2c      	ldr	r3, [pc, #176]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ed2:	4a29      	ldr	r2, [pc, #164]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ed8:	4b27      	ldr	r3, [pc, #156]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d114      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ee4:	f7fd f8c0 	bl	8001068 <HAL_GetTick>
 8003ee8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eea:	e00a      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eec:	f7fd f8bc 	bl	8001068 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e034      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f02:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0ee      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f1a:	d10d      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003f1c:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f30:	4911      	ldr	r1, [pc, #68]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	608b      	str	r3, [r1, #8]
 8003f36:	e005      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003f38:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	4a0e      	ldr	r2, [pc, #56]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f42:	6093      	str	r3, [r2, #8]
 8003f44:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f50:	4909      	ldr	r1, [pc, #36]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	7d1a      	ldrb	r2, [r3, #20]
 8003f66:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003f68:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	42470068 	.word	0x42470068
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	40007000 	.word	0x40007000
 8003f80:	42470e40 	.word	0x42470e40
 8003f84:	424711e0 	.word	0x424711e0

08003f88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d13f      	bne.n	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003fa6:	4b23      	ldr	r3, [pc, #140]	; (8004034 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fae:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d004      	beq.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d131      	bne.n	800401e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003fba:	4b1f      	ldr	r3, [pc, #124]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003fbc:	617b      	str	r3, [r7, #20]
          break;
 8003fbe:	e031      	b.n	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003fc0:	4b1c      	ldr	r3, [pc, #112]	; (8004034 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fcc:	d109      	bne.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003fce:	4b19      	ldr	r3, [pc, #100]	; (8004034 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fd8:	4a18      	ldr	r2, [pc, #96]	; (800403c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003fe2:	4b14      	ldr	r3, [pc, #80]	; (8004034 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fec:	4a14      	ldr	r2, [pc, #80]	; (8004040 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff2:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003ff4:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ffa:	099b      	lsrs	r3, r3, #6
 8003ffc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	fb02 f303 	mul.w	r3, r2, r3
 8004006:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004008:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800400a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800400e:	0f1b      	lsrs	r3, r3, #28
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	fbb2 f3f3 	udiv	r3, r2, r3
 800401a:	617b      	str	r3, [r7, #20]
          break;
 800401c:	e002      	b.n	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
          break;
 8004022:	bf00      	nop
        }
      }
      break;
 8004024:	bf00      	nop
    }
  }
  return frequency;
 8004026:	697b      	ldr	r3, [r7, #20]
}
 8004028:	4618      	mov	r0, r3
 800402a:	371c      	adds	r7, #28
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	40023800 	.word	0x40023800
 8004038:	00bb8000 	.word	0x00bb8000
 800403c:	007a1200 	.word	0x007a1200
 8004040:	00f42400 	.word	0x00f42400

08004044 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e056      	b.n	8004104 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d106      	bne.n	8004076 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7fc fe9d 	bl	8000db0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2202      	movs	r2, #2
 800407a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800408c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	431a      	orrs	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	ea42 0103 	orr.w	r1, r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	0c1b      	lsrs	r3, r3, #16
 80040d4:	f003 0104 	and.w	r1, r3, #4
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69da      	ldr	r2, [r3, #28]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800410c:	b084      	sub	sp, #16
 800410e:	b580      	push	{r7, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	f107 001c 	add.w	r0, r7, #28
 800411a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004120:	2b01      	cmp	r3, #1
 8004122:	d122      	bne.n	800416a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800414c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800414e:	2b01      	cmp	r3, #1
 8004150:	d105      	bne.n	800415e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f001 fac6 	bl	80056f0 <USB_CoreReset>
 8004164:	4603      	mov	r3, r0
 8004166:	73fb      	strb	r3, [r7, #15]
 8004168:	e01a      	b.n	80041a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f001 faba 	bl	80056f0 <USB_CoreReset>
 800417c:	4603      	mov	r3, r0
 800417e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	639a      	str	r2, [r3, #56]	; 0x38
 8004192:	e005      	b.n	80041a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d10b      	bne.n	80041be <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f043 0206 	orr.w	r2, r3, #6
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f043 0220 	orr.w	r2, r3, #32
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80041be:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041ca:	b004      	add	sp, #16
 80041cc:	4770      	bx	lr
	...

080041d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	4613      	mov	r3, r2
 80041dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d165      	bne.n	80042b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4a41      	ldr	r2, [pc, #260]	; (80042ec <USB_SetTurnaroundTime+0x11c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d906      	bls.n	80041fa <USB_SetTurnaroundTime+0x2a>
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4a40      	ldr	r2, [pc, #256]	; (80042f0 <USB_SetTurnaroundTime+0x120>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d802      	bhi.n	80041fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80041f4:	230f      	movs	r3, #15
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	e062      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	4a3c      	ldr	r2, [pc, #240]	; (80042f0 <USB_SetTurnaroundTime+0x120>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d906      	bls.n	8004210 <USB_SetTurnaroundTime+0x40>
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	4a3b      	ldr	r2, [pc, #236]	; (80042f4 <USB_SetTurnaroundTime+0x124>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d802      	bhi.n	8004210 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800420a:	230e      	movs	r3, #14
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	e057      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4a38      	ldr	r2, [pc, #224]	; (80042f4 <USB_SetTurnaroundTime+0x124>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d906      	bls.n	8004226 <USB_SetTurnaroundTime+0x56>
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4a37      	ldr	r2, [pc, #220]	; (80042f8 <USB_SetTurnaroundTime+0x128>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d802      	bhi.n	8004226 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004220:	230d      	movs	r3, #13
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	e04c      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	4a33      	ldr	r2, [pc, #204]	; (80042f8 <USB_SetTurnaroundTime+0x128>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d906      	bls.n	800423c <USB_SetTurnaroundTime+0x6c>
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	4a32      	ldr	r2, [pc, #200]	; (80042fc <USB_SetTurnaroundTime+0x12c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d802      	bhi.n	800423c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004236:	230c      	movs	r3, #12
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	e041      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4a2f      	ldr	r2, [pc, #188]	; (80042fc <USB_SetTurnaroundTime+0x12c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d906      	bls.n	8004252 <USB_SetTurnaroundTime+0x82>
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4a2e      	ldr	r2, [pc, #184]	; (8004300 <USB_SetTurnaroundTime+0x130>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d802      	bhi.n	8004252 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800424c:	230b      	movs	r3, #11
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	e036      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	4a2a      	ldr	r2, [pc, #168]	; (8004300 <USB_SetTurnaroundTime+0x130>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d906      	bls.n	8004268 <USB_SetTurnaroundTime+0x98>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	4a29      	ldr	r2, [pc, #164]	; (8004304 <USB_SetTurnaroundTime+0x134>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d802      	bhi.n	8004268 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004262:	230a      	movs	r3, #10
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	e02b      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4a26      	ldr	r2, [pc, #152]	; (8004304 <USB_SetTurnaroundTime+0x134>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d906      	bls.n	800427e <USB_SetTurnaroundTime+0xae>
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4a25      	ldr	r2, [pc, #148]	; (8004308 <USB_SetTurnaroundTime+0x138>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d802      	bhi.n	800427e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004278:	2309      	movs	r3, #9
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	e020      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	4a21      	ldr	r2, [pc, #132]	; (8004308 <USB_SetTurnaroundTime+0x138>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d906      	bls.n	8004294 <USB_SetTurnaroundTime+0xc4>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	4a20      	ldr	r2, [pc, #128]	; (800430c <USB_SetTurnaroundTime+0x13c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d802      	bhi.n	8004294 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800428e:	2308      	movs	r3, #8
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	e015      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4a1d      	ldr	r2, [pc, #116]	; (800430c <USB_SetTurnaroundTime+0x13c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d906      	bls.n	80042aa <USB_SetTurnaroundTime+0xda>
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4a1c      	ldr	r2, [pc, #112]	; (8004310 <USB_SetTurnaroundTime+0x140>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d802      	bhi.n	80042aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80042a4:	2307      	movs	r3, #7
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	e00a      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80042aa:	2306      	movs	r3, #6
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	e007      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d102      	bne.n	80042bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80042b6:	2309      	movs	r3, #9
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	e001      	b.n	80042c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80042bc:	2309      	movs	r3, #9
 80042be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	029b      	lsls	r3, r3, #10
 80042d4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80042d8:	431a      	orrs	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	371c      	adds	r7, #28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	00d8acbf 	.word	0x00d8acbf
 80042f0:	00e4e1bf 	.word	0x00e4e1bf
 80042f4:	00f423ff 	.word	0x00f423ff
 80042f8:	0106737f 	.word	0x0106737f
 80042fc:	011a499f 	.word	0x011a499f
 8004300:	01312cff 	.word	0x01312cff
 8004304:	014ca43f 	.word	0x014ca43f
 8004308:	016e35ff 	.word	0x016e35ff
 800430c:	01a6ab1f 	.word	0x01a6ab1f
 8004310:	01e847ff 	.word	0x01e847ff

08004314 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f043 0201 	orr.w	r2, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f023 0201 	bic.w	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004370:	78fb      	ldrb	r3, [r7, #3]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d106      	bne.n	8004384 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	60da      	str	r2, [r3, #12]
 8004382:	e00b      	b.n	800439c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	60da      	str	r2, [r3, #12]
 8004396:	e001      	b.n	800439c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e003      	b.n	80043a4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800439c:	2032      	movs	r0, #50	; 0x32
 800439e:	f7fc fe6f 	bl	8001080 <HAL_Delay>

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043ac:	b084      	sub	sp, #16
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b086      	sub	sp, #24
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80043ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043c6:	2300      	movs	r3, #0
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	e009      	b.n	80043e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	3340      	adds	r3, #64	; 0x40
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	2200      	movs	r2, #0
 80043d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	3301      	adds	r3, #1
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	2b0e      	cmp	r3, #14
 80043e4:	d9f2      	bls.n	80043cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80043e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d11c      	bne.n	8004426 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043fa:	f043 0302 	orr.w	r3, r3, #2
 80043fe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	639a      	str	r2, [r3, #56]	; 0x38
 8004424:	e00b      	b.n	800443e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004444:	461a      	mov	r2, r3
 8004446:	2300      	movs	r3, #0
 8004448:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004450:	4619      	mov	r1, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004458:	461a      	mov	r2, r3
 800445a:	680b      	ldr	r3, [r1, #0]
 800445c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004460:	2b01      	cmp	r3, #1
 8004462:	d10c      	bne.n	800447e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004466:	2b00      	cmp	r3, #0
 8004468:	d104      	bne.n	8004474 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800446a:	2100      	movs	r1, #0
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f949 	bl	8004704 <USB_SetDevSpeed>
 8004472:	e008      	b.n	8004486 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004474:	2101      	movs	r1, #1
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f944 	bl	8004704 <USB_SetDevSpeed>
 800447c:	e003      	b.n	8004486 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800447e:	2103      	movs	r1, #3
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f93f 	bl	8004704 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004486:	2110      	movs	r1, #16
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f8f3 	bl	8004674 <USB_FlushTxFifo>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f911 	bl	80046c0 <USB_FlushRxFifo>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ae:	461a      	mov	r2, r3
 80044b0:	2300      	movs	r3, #0
 80044b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ba:	461a      	mov	r2, r3
 80044bc:	2300      	movs	r3, #0
 80044be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c6:	461a      	mov	r2, r3
 80044c8:	2300      	movs	r3, #0
 80044ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044cc:	2300      	movs	r3, #0
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	e043      	b.n	800455a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044e8:	d118      	bne.n	800451c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10a      	bne.n	8004506 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fc:	461a      	mov	r2, r3
 80044fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004502:	6013      	str	r3, [r2, #0]
 8004504:	e013      	b.n	800452e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004512:	461a      	mov	r2, r3
 8004514:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	e008      	b.n	800452e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004528:	461a      	mov	r2, r3
 800452a:	2300      	movs	r3, #0
 800452c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4413      	add	r3, r2
 8004536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453a:	461a      	mov	r2, r3
 800453c:	2300      	movs	r3, #0
 800453e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454c:	461a      	mov	r2, r3
 800454e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004552:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	3301      	adds	r3, #1
 8004558:	613b      	str	r3, [r7, #16]
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	429a      	cmp	r2, r3
 8004560:	d3b7      	bcc.n	80044d2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004562:	2300      	movs	r3, #0
 8004564:	613b      	str	r3, [r7, #16]
 8004566:	e043      	b.n	80045f0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800457a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800457e:	d118      	bne.n	80045b2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10a      	bne.n	800459c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004592:	461a      	mov	r2, r3
 8004594:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	e013      	b.n	80045c4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a8:	461a      	mov	r2, r3
 80045aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	e008      	b.n	80045c4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045be:	461a      	mov	r2, r3
 80045c0:	2300      	movs	r3, #0
 80045c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d0:	461a      	mov	r2, r3
 80045d2:	2300      	movs	r3, #0
 80045d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e2:	461a      	mov	r2, r3
 80045e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	3301      	adds	r3, #1
 80045ee:	613b      	str	r3, [r7, #16]
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d3b7      	bcc.n	8004568 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004606:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800460a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004618:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461c:	2b00      	cmp	r3, #0
 800461e:	d105      	bne.n	800462c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	f043 0210 	orr.w	r2, r3, #16
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699a      	ldr	r2, [r3, #24]
 8004630:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <USB_DevInit+0x2c4>)
 8004632:	4313      	orrs	r3, r2
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f043 0208 	orr.w	r2, r3, #8
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800464a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d107      	bne.n	8004660 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004658:	f043 0304 	orr.w	r3, r3, #4
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004660:	7dfb      	ldrb	r3, [r7, #23]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800466c:	b004      	add	sp, #16
 800466e:	4770      	bx	lr
 8004670:	803c3800 	.word	0x803c3800

08004674 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	019b      	lsls	r3, r3, #6
 8004686:	f043 0220 	orr.w	r2, r3, #32
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3301      	adds	r3, #1
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4a09      	ldr	r2, [pc, #36]	; (80046bc <USB_FlushTxFifo+0x48>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d901      	bls.n	80046a0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e006      	b.n	80046ae <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d0f0      	beq.n	800468e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	00030d40 	.word	0x00030d40

080046c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2210      	movs	r2, #16
 80046d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3301      	adds	r3, #1
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4a09      	ldr	r2, [pc, #36]	; (8004700 <USB_FlushRxFifo+0x40>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d901      	bls.n	80046e4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e006      	b.n	80046f2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f003 0310 	and.w	r3, r3, #16
 80046ec:	2b10      	cmp	r3, #16
 80046ee:	d0f0      	beq.n	80046d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	00030d40 	.word	0x00030d40

08004704 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	460b      	mov	r3, r1
 800470e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	78fb      	ldrb	r3, [r7, #3]
 800471e:	68f9      	ldr	r1, [r7, #12]
 8004720:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004724:	4313      	orrs	r3, r2
 8004726:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004736:	b480      	push	{r7}
 8004738:	b087      	sub	sp, #28
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 0306 	and.w	r3, r3, #6
 800474e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d102      	bne.n	800475c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004756:	2300      	movs	r3, #0
 8004758:	75fb      	strb	r3, [r7, #23]
 800475a:	e00a      	b.n	8004772 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d002      	beq.n	8004768 <USB_GetDevSpeed+0x32>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b06      	cmp	r3, #6
 8004766:	d102      	bne.n	800476e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004768:	2302      	movs	r3, #2
 800476a:	75fb      	strb	r3, [r7, #23]
 800476c:	e001      	b.n	8004772 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800476e:	230f      	movs	r3, #15
 8004770:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004772:	7dfb      	ldrb	r3, [r7, #23]
}
 8004774:	4618      	mov	r0, r3
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	785b      	ldrb	r3, [r3, #1]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d13a      	bne.n	8004812 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a2:	69da      	ldr	r2, [r3, #28]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	f003 030f 	and.w	r3, r3, #15
 80047ac:	2101      	movs	r1, #1
 80047ae:	fa01 f303 	lsl.w	r3, r1, r3
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	68f9      	ldr	r1, [r7, #12]
 80047b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047ba:	4313      	orrs	r3, r2
 80047bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d155      	bne.n	8004880 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	78db      	ldrb	r3, [r3, #3]
 80047ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	059b      	lsls	r3, r3, #22
 80047f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047f8:	4313      	orrs	r3, r2
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	0151      	lsls	r1, r2, #5
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	440a      	add	r2, r1
 8004802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800480a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	e036      	b.n	8004880 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004818:	69da      	ldr	r2, [r3, #28]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	2101      	movs	r1, #1
 8004824:	fa01 f303 	lsl.w	r3, r1, r3
 8004828:	041b      	lsls	r3, r3, #16
 800482a:	68f9      	ldr	r1, [r7, #12]
 800482c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004830:	4313      	orrs	r3, r2
 8004832:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d11a      	bne.n	8004880 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4413      	add	r3, r2
 8004852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	78db      	ldrb	r3, [r3, #3]
 8004864:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004866:	430b      	orrs	r3, r1
 8004868:	4313      	orrs	r3, r2
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	0151      	lsls	r1, r2, #5
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	440a      	add	r2, r1
 8004872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800487a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800487e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
	...

08004890 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	785b      	ldrb	r3, [r3, #1]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d161      	bne.n	8004970 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048c2:	d11f      	bne.n	8004904 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	0151      	lsls	r1, r2, #5
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	440a      	add	r2, r1
 80048da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	0151      	lsls	r1, r2, #5
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	440a      	add	r2, r1
 80048fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004902:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	f003 030f 	and.w	r3, r3, #15
 8004914:	2101      	movs	r1, #1
 8004916:	fa01 f303 	lsl.w	r3, r1, r3
 800491a:	b29b      	uxth	r3, r3
 800491c:	43db      	mvns	r3, r3
 800491e:	68f9      	ldr	r1, [r7, #12]
 8004920:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004924:	4013      	ands	r3, r2
 8004926:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492e:	69da      	ldr	r2, [r3, #28]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	2101      	movs	r1, #1
 800493a:	fa01 f303 	lsl.w	r3, r1, r3
 800493e:	b29b      	uxth	r3, r3
 8004940:	43db      	mvns	r3, r3
 8004942:	68f9      	ldr	r1, [r7, #12]
 8004944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004948:	4013      	ands	r3, r2
 800494a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	0159      	lsls	r1, r3, #5
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	440b      	add	r3, r1
 8004962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004966:	4619      	mov	r1, r3
 8004968:	4b35      	ldr	r3, [pc, #212]	; (8004a40 <USB_DeactivateEndpoint+0x1b0>)
 800496a:	4013      	ands	r3, r2
 800496c:	600b      	str	r3, [r1, #0]
 800496e:	e060      	b.n	8004a32 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004982:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004986:	d11f      	bne.n	80049c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	0151      	lsls	r1, r2, #5
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	440a      	add	r2, r1
 800499e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	0151      	lsls	r1, r2, #5
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	440a      	add	r2, r1
 80049be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	f003 030f 	and.w	r3, r3, #15
 80049d8:	2101      	movs	r1, #1
 80049da:	fa01 f303 	lsl.w	r3, r1, r3
 80049de:	041b      	lsls	r3, r3, #16
 80049e0:	43db      	mvns	r3, r3
 80049e2:	68f9      	ldr	r1, [r7, #12]
 80049e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049e8:	4013      	ands	r3, r2
 80049ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f2:	69da      	ldr	r2, [r3, #28]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	f003 030f 	and.w	r3, r3, #15
 80049fc:	2101      	movs	r1, #1
 80049fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004a02:	041b      	lsls	r3, r3, #16
 8004a04:	43db      	mvns	r3, r3
 8004a06:	68f9      	ldr	r1, [r7, #12]
 8004a08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	0159      	lsls	r1, r3, #5
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	440b      	add	r3, r1
 8004a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <USB_DeactivateEndpoint+0x1b4>)
 8004a2e:	4013      	ands	r3, r2
 8004a30:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	ec337800 	.word	0xec337800
 8004a44:	eff37800 	.word	0xeff37800

08004a48 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08a      	sub	sp, #40	; 0x28
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	4613      	mov	r3, r2
 8004a54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	785b      	ldrb	r3, [r3, #1]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	f040 815c 	bne.w	8004d22 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d132      	bne.n	8004ad8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	0151      	lsls	r1, r2, #5
 8004a84:	69fa      	ldr	r2, [r7, #28]
 8004a86:	440a      	add	r2, r1
 8004a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	0151      	lsls	r1, r2, #5
 8004aa8:	69fa      	ldr	r2, [r7, #28]
 8004aaa:	440a      	add	r2, r1
 8004aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ab4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	0151      	lsls	r1, r2, #5
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	440a      	add	r2, r1
 8004acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad0:	0cdb      	lsrs	r3, r3, #19
 8004ad2:	04db      	lsls	r3, r3, #19
 8004ad4:	6113      	str	r3, [r2, #16]
 8004ad6:	e074      	b.n	8004bc2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	0151      	lsls	r1, r2, #5
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	440a      	add	r2, r1
 8004aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af2:	0cdb      	lsrs	r3, r3, #19
 8004af4:	04db      	lsls	r3, r3, #19
 8004af6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	0151      	lsls	r1, r2, #5
 8004b0a:	69fa      	ldr	r2, [r7, #28]
 8004b0c:	440a      	add	r2, r1
 8004b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	6959      	ldr	r1, [r3, #20]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	440b      	add	r3, r1
 8004b34:	1e59      	subs	r1, r3, #1
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b3e:	04d9      	lsls	r1, r3, #19
 8004b40:	4b9d      	ldr	r3, [pc, #628]	; (8004db8 <USB_EPStartXfer+0x370>)
 8004b42:	400b      	ands	r3, r1
 8004b44:	69b9      	ldr	r1, [r7, #24]
 8004b46:	0148      	lsls	r0, r1, #5
 8004b48:	69f9      	ldr	r1, [r7, #28]
 8004b4a:	4401      	add	r1, r0
 8004b4c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b50:	4313      	orrs	r3, r2
 8004b52:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b6a:	69b9      	ldr	r1, [r7, #24]
 8004b6c:	0148      	lsls	r0, r1, #5
 8004b6e:	69f9      	ldr	r1, [r7, #28]
 8004b70:	4401      	add	r1, r0
 8004b72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b76:	4313      	orrs	r3, r2
 8004b78:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	78db      	ldrb	r3, [r3, #3]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d11f      	bne.n	8004bc2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	0151      	lsls	r1, r2, #5
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	440a      	add	r2, r1
 8004b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b9c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ba0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	0151      	lsls	r1, r2, #5
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	440a      	add	r2, r1
 8004bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bc0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d14b      	bne.n	8004c60 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d009      	beq.n	8004be4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bdc:	461a      	mov	r2, r3
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	78db      	ldrb	r3, [r3, #3]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d128      	bne.n	8004c3e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d110      	bne.n	8004c1e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	0151      	lsls	r1, r2, #5
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	440a      	add	r2, r1
 8004c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	e00f      	b.n	8004c3e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	0151      	lsls	r1, r2, #5
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	440a      	add	r2, r1
 8004c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	0151      	lsls	r1, r2, #5
 8004c50:	69fa      	ldr	r2, [r7, #28]
 8004c52:	440a      	add	r2, r1
 8004c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	e12f      	b.n	8004ec0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	0151      	lsls	r1, r2, #5
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	440a      	add	r2, r1
 8004c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c7e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	78db      	ldrb	r3, [r3, #3]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d015      	beq.n	8004cb4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8117 	beq.w	8004ec0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca8:	69f9      	ldr	r1, [r7, #28]
 8004caa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	634b      	str	r3, [r1, #52]	; 0x34
 8004cb2:	e105      	b.n	8004ec0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d110      	bne.n	8004ce6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	0151      	lsls	r1, r2, #5
 8004cd6:	69fa      	ldr	r2, [r7, #28]
 8004cd8:	440a      	add	r2, r1
 8004cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	e00f      	b.n	8004d06 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	0151      	lsls	r1, r2, #5
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	440a      	add	r2, r1
 8004cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d04:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	68d9      	ldr	r1, [r3, #12]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	781a      	ldrb	r2, [r3, #0]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	b298      	uxth	r0, r3
 8004d14:	79fb      	ldrb	r3, [r7, #7]
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	4603      	mov	r3, r0
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 fa2b 	bl	8005176 <USB_WritePacket>
 8004d20:	e0ce      	b.n	8004ec0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	0151      	lsls	r1, r2, #5
 8004d34:	69fa      	ldr	r2, [r7, #28]
 8004d36:	440a      	add	r2, r1
 8004d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d3c:	0cdb      	lsrs	r3, r3, #19
 8004d3e:	04db      	lsls	r3, r3, #19
 8004d40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	0151      	lsls	r1, r2, #5
 8004d54:	69fa      	ldr	r2, [r7, #28]
 8004d56:	440a      	add	r2, r1
 8004d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d64:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d126      	bne.n	8004dbc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d84:	69b9      	ldr	r1, [r7, #24]
 8004d86:	0148      	lsls	r0, r1, #5
 8004d88:	69f9      	ldr	r1, [r7, #28]
 8004d8a:	4401      	add	r1, r0
 8004d8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d90:	4313      	orrs	r3, r2
 8004d92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	0151      	lsls	r1, r2, #5
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	440a      	add	r2, r1
 8004daa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004db2:	6113      	str	r3, [r2, #16]
 8004db4:	e036      	b.n	8004e24 <USB_EPStartXfer+0x3dc>
 8004db6:	bf00      	nop
 8004db8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	695a      	ldr	r2, [r3, #20]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	1e5a      	subs	r2, r3, #1
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	8afb      	ldrh	r3, [r7, #22]
 8004de2:	04d9      	lsls	r1, r3, #19
 8004de4:	4b39      	ldr	r3, [pc, #228]	; (8004ecc <USB_EPStartXfer+0x484>)
 8004de6:	400b      	ands	r3, r1
 8004de8:	69b9      	ldr	r1, [r7, #24]
 8004dea:	0148      	lsls	r0, r1, #5
 8004dec:	69f9      	ldr	r1, [r7, #28]
 8004dee:	4401      	add	r1, r0
 8004df0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004df4:	4313      	orrs	r3, r2
 8004df6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e04:	691a      	ldr	r2, [r3, #16]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	8af9      	ldrh	r1, [r7, #22]
 8004e0c:	fb01 f303 	mul.w	r3, r1, r3
 8004e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e14:	69b9      	ldr	r1, [r7, #24]
 8004e16:	0148      	lsls	r0, r1, #5
 8004e18:	69f9      	ldr	r1, [r7, #28]
 8004e1a:	4401      	add	r1, r0
 8004e1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e20:	4313      	orrs	r3, r2
 8004e22:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e24:	79fb      	ldrb	r3, [r7, #7]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d10d      	bne.n	8004e46 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d009      	beq.n	8004e46 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	68d9      	ldr	r1, [r3, #12]
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e42:	460a      	mov	r2, r1
 8004e44:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	78db      	ldrb	r3, [r3, #3]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d128      	bne.n	8004ea0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d110      	bne.n	8004e80 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	0151      	lsls	r1, r2, #5
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	440a      	add	r2, r1
 8004e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	e00f      	b.n	8004ea0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	0151      	lsls	r1, r2, #5
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	440a      	add	r2, r1
 8004e96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e9e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	0151      	lsls	r1, r2, #5
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	440a      	add	r2, r1
 8004eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ebe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3720      	adds	r7, #32
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	1ff80000 	.word	0x1ff80000

08004ed0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	785b      	ldrb	r3, [r3, #1]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	f040 80cd 	bne.w	800508c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d132      	bne.n	8004f60 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	0151      	lsls	r1, r2, #5
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	440a      	add	r2, r1
 8004f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	0151      	lsls	r1, r2, #5
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	440a      	add	r2, r1
 8004f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f58:	0cdb      	lsrs	r3, r3, #19
 8004f5a:	04db      	lsls	r3, r3, #19
 8004f5c:	6113      	str	r3, [r2, #16]
 8004f5e:	e04e      	b.n	8004ffe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	0151      	lsls	r1, r2, #5
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	440a      	add	r2, r1
 8004f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f7a:	0cdb      	lsrs	r3, r3, #19
 8004f7c:	04db      	lsls	r3, r3, #19
 8004f7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	0151      	lsls	r1, r2, #5
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	440a      	add	r2, r1
 8004f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fa2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	695a      	ldr	r2, [r3, #20]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d903      	bls.n	8004fb8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	0151      	lsls	r1, r2, #5
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	440a      	add	r2, r1
 8004fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe4:	691a      	ldr	r2, [r3, #16]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fee:	6939      	ldr	r1, [r7, #16]
 8004ff0:	0148      	lsls	r0, r1, #5
 8004ff2:	6979      	ldr	r1, [r7, #20]
 8004ff4:	4401      	add	r1, r0
 8004ff6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d11e      	bne.n	8005042 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d009      	beq.n	8005020 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005018:	461a      	mov	r2, r3
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	0151      	lsls	r1, r2, #5
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	440a      	add	r2, r1
 8005036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800503a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	e092      	b.n	8005168 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	0151      	lsls	r1, r2, #5
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	440a      	add	r2, r1
 8005058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005060:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d07e      	beq.n	8005168 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	2101      	movs	r1, #1
 800507c:	fa01 f303 	lsl.w	r3, r1, r3
 8005080:	6979      	ldr	r1, [r7, #20]
 8005082:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005086:	4313      	orrs	r3, r2
 8005088:	634b      	str	r3, [r1, #52]	; 0x34
 800508a:	e06d      	b.n	8005168 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	0151      	lsls	r1, r2, #5
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	440a      	add	r2, r1
 80050a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a6:	0cdb      	lsrs	r3, r3, #19
 80050a8:	04db      	lsls	r3, r3, #19
 80050aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	0151      	lsls	r1, r2, #5
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	440a      	add	r2, r1
 80050c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050ce:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	0151      	lsls	r1, r2, #5
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	440a      	add	r2, r1
 80050f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510c:	691a      	ldr	r2, [r3, #16]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005116:	6939      	ldr	r1, [r7, #16]
 8005118:	0148      	lsls	r0, r1, #5
 800511a:	6979      	ldr	r1, [r7, #20]
 800511c:	4401      	add	r1, r0
 800511e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005122:	4313      	orrs	r3, r2
 8005124:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005126:	79fb      	ldrb	r3, [r7, #7]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d10d      	bne.n	8005148 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d009      	beq.n	8005148 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	68d9      	ldr	r1, [r3, #12]
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005144:	460a      	mov	r2, r1
 8005146:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	0151      	lsls	r1, r2, #5
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	440a      	add	r2, r1
 800515e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005162:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005166:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005176:	b480      	push	{r7}
 8005178:	b089      	sub	sp, #36	; 0x24
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	4611      	mov	r1, r2
 8005182:	461a      	mov	r2, r3
 8005184:	460b      	mov	r3, r1
 8005186:	71fb      	strb	r3, [r7, #7]
 8005188:	4613      	mov	r3, r2
 800518a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005194:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005198:	2b00      	cmp	r3, #0
 800519a:	d11a      	bne.n	80051d2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800519c:	88bb      	ldrh	r3, [r7, #4]
 800519e:	3303      	adds	r3, #3
 80051a0:	089b      	lsrs	r3, r3, #2
 80051a2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80051a4:	2300      	movs	r3, #0
 80051a6:	61bb      	str	r3, [r7, #24]
 80051a8:	e00f      	b.n	80051ca <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	031a      	lsls	r2, r3, #12
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b6:	461a      	mov	r2, r3
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	3304      	adds	r3, #4
 80051c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	3301      	adds	r3, #1
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d3eb      	bcc.n	80051aa <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3724      	adds	r7, #36	; 0x24
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b089      	sub	sp, #36	; 0x24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	4613      	mov	r3, r2
 80051ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80051f6:	88fb      	ldrh	r3, [r7, #6]
 80051f8:	3303      	adds	r3, #3
 80051fa:	089b      	lsrs	r3, r3, #2
 80051fc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80051fe:	2300      	movs	r3, #0
 8005200:	61bb      	str	r3, [r7, #24]
 8005202:	e00b      	b.n	800521c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	3304      	adds	r3, #4
 8005214:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	3301      	adds	r3, #1
 800521a:	61bb      	str	r3, [r7, #24]
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	429a      	cmp	r2, r3
 8005222:	d3ef      	bcc.n	8005204 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005224:	69fb      	ldr	r3, [r7, #28]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3724      	adds	r7, #36	; 0x24
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005232:	b480      	push	{r7}
 8005234:	b085      	sub	sp, #20
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	785b      	ldrb	r3, [r3, #1]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d12c      	bne.n	80052a8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	db12      	blt.n	8005286 <USB_EPSetStall+0x54>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00f      	beq.n	8005286 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	0151      	lsls	r1, r2, #5
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	440a      	add	r2, r1
 800527c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005280:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005284:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	0151      	lsls	r1, r2, #5
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	440a      	add	r2, r1
 800529c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	e02b      	b.n	8005300 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	db12      	blt.n	80052e0 <USB_EPSetStall+0xae>
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00f      	beq.n	80052e0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	0151      	lsls	r1, r2, #5
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	440a      	add	r2, r1
 80052d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052de:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	0151      	lsls	r1, r2, #5
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	440a      	add	r2, r1
 80052f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800530e:	b480      	push	{r7}
 8005310:	b085      	sub	sp, #20
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	785b      	ldrb	r3, [r3, #1]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d128      	bne.n	800537c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	0151      	lsls	r1, r2, #5
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	440a      	add	r2, r1
 8005340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005344:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005348:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	78db      	ldrb	r3, [r3, #3]
 800534e:	2b03      	cmp	r3, #3
 8005350:	d003      	beq.n	800535a <USB_EPClearStall+0x4c>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	78db      	ldrb	r3, [r3, #3]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d138      	bne.n	80053cc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4413      	add	r3, r2
 8005362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	0151      	lsls	r1, r2, #5
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	440a      	add	r2, r1
 8005370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	e027      	b.n	80053cc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	440a      	add	r2, r1
 8005392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005396:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800539a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	78db      	ldrb	r3, [r3, #3]
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d003      	beq.n	80053ac <USB_EPClearStall+0x9e>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	78db      	ldrb	r3, [r3, #3]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d10f      	bne.n	80053cc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	0151      	lsls	r1, r2, #5
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	440a      	add	r2, r1
 80053c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ca:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80053da:	b480      	push	{r7}
 80053dc:	b085      	sub	sp, #20
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	460b      	mov	r3, r1
 80053e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053f8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80053fc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	78fb      	ldrb	r3, [r7, #3]
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800540e:	68f9      	ldr	r1, [r7, #12]
 8005410:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005414:	4313      	orrs	r3, r2
 8005416:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005426:	b480      	push	{r7}
 8005428:	b085      	sub	sp, #20
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005440:	f023 0303 	bic.w	r3, r3, #3
 8005444:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005454:	f023 0302 	bic.w	r3, r3, #2
 8005458:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005482:	f023 0303 	bic.w	r3, r3, #3
 8005486:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005496:	f043 0302 	orr.w	r3, r3, #2
 800549a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b085      	sub	sp, #20
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4013      	ands	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80054c2:	68fb      	ldr	r3, [r7, #12]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	4013      	ands	r3, r2
 80054f2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	0c1b      	lsrs	r3, r3, #16
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	4013      	ands	r3, r2
 8005526:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	b29b      	uxth	r3, r3
}
 800552c:	4618      	mov	r0, r3
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005548:	78fb      	ldrb	r3, [r7, #3]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	4013      	ands	r3, r2
 8005564:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005566:	68bb      	ldr	r3, [r7, #8]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005596:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	fa22 f303 	lsr.w	r3, r2, r3
 80055a4:	01db      	lsls	r3, r3, #7
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80055ae:	78fb      	ldrb	r3, [r7, #3]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4013      	ands	r3, r2
 80055c0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055c2:	68bb      	ldr	r3, [r7, #8]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	371c      	adds	r7, #28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	f003 0301 	and.w	r3, r3, #1
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005606:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800560a:	f023 0307 	bic.w	r3, r3, #7
 800560e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800561e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005622:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
	...

08005634 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	460b      	mov	r3, r1
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	333c      	adds	r3, #60	; 0x3c
 800564a:	3304      	adds	r3, #4
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	4a26      	ldr	r2, [pc, #152]	; (80056ec <USB_EP0_OutStart+0xb8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d90a      	bls.n	800566e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005668:	d101      	bne.n	800566e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	e037      	b.n	80056de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005674:	461a      	mov	r2, r3
 8005676:	2300      	movs	r3, #0
 8005678:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005688:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800568c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800569c:	f043 0318 	orr.w	r3, r3, #24
 80056a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80056b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80056b6:	7afb      	ldrb	r3, [r7, #11]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d10f      	bne.n	80056dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c2:	461a      	mov	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80056da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	4f54300a 	.word	0x4f54300a

080056f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3301      	adds	r3, #1
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4a13      	ldr	r2, [pc, #76]	; (8005754 <USB_CoreReset+0x64>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e01b      	b.n	8005746 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	daf2      	bge.n	80056fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f043 0201 	orr.w	r2, r3, #1
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3301      	adds	r3, #1
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4a09      	ldr	r2, [pc, #36]	; (8005754 <USB_CoreReset+0x64>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d901      	bls.n	8005738 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e006      	b.n	8005746 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b01      	cmp	r3, #1
 8005742:	d0f0      	beq.n	8005726 <USB_CoreReset+0x36>

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	00030d40 	.word	0x00030d40

08005758 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	460b      	mov	r3, r1
 8005762:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005764:	2010      	movs	r0, #16
 8005766:	f001 fef1 	bl	800754c <malloc>
 800576a:	4603      	mov	r3, r0
 800576c:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d105      	bne.n	8005780 <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800577c:	2302      	movs	r3, #2
 800577e:	e01b      	b.n	80057b8 <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	7c1b      	ldrb	r3, [r3, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d103      	bne.n	8005798 <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2207      	movs	r2, #7
 8005794:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005796:	e002      	b.n	800579e <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	220a      	movs	r2, #10
 800579c:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800579e:	2304      	movs	r3, #4
 80057a0:	2203      	movs	r2, #3
 80057a2:	2181      	movs	r1, #129	; 0x81
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f001 fd6a 	bl	800727e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	460b      	mov	r3, r1
 80057ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80057cc:	2181      	movs	r1, #129	; 0x81
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f001 fd7b 	bl	80072ca <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d009      	beq.n	80057fe <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057f0:	4618      	mov	r0, r3
 80057f2:	f001 feb3 	bl	800755c <free>
    pdev->pClassData = NULL;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005818:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800582a:	2b00      	cmp	r3, #0
 800582c:	d045      	beq.n	80058ba <USBD_HID_Setup+0xb2>
 800582e:	2b20      	cmp	r3, #32
 8005830:	f040 80d4 	bne.w	80059dc <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	785b      	ldrb	r3, [r3, #1]
 8005838:	3b02      	subs	r3, #2
 800583a:	2b09      	cmp	r3, #9
 800583c:	d835      	bhi.n	80058aa <USBD_HID_Setup+0xa2>
 800583e:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <USBD_HID_Setup+0x3c>)
 8005840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005844:	0800589b 	.word	0x0800589b
 8005848:	0800587b 	.word	0x0800587b
 800584c:	080058ab 	.word	0x080058ab
 8005850:	080058ab 	.word	0x080058ab
 8005854:	080058ab 	.word	0x080058ab
 8005858:	080058ab 	.word	0x080058ab
 800585c:	080058ab 	.word	0x080058ab
 8005860:	080058ab 	.word	0x080058ab
 8005864:	08005889 	.word	0x08005889
 8005868:	0800586d 	.word	0x0800586d
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	885b      	ldrh	r3, [r3, #2]
 8005870:	b2db      	uxtb	r3, r3
 8005872:	461a      	mov	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	601a      	str	r2, [r3, #0]
      break;
 8005878:	e01e      	b.n	80058b8 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	4619      	mov	r1, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f001 f9b4 	bl	8006bee <USBD_CtlSendData>
      break;
 8005886:	e017      	b.n	80058b8 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	885b      	ldrh	r3, [r3, #2]
 800588c:	0a1b      	lsrs	r3, r3, #8
 800588e:	b29b      	uxth	r3, r3
 8005890:	b2db      	uxtb	r3, r3
 8005892:	461a      	mov	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	605a      	str	r2, [r3, #4]
      break;
 8005898:	e00e      	b.n	80058b8 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3304      	adds	r3, #4
 800589e:	2201      	movs	r2, #1
 80058a0:	4619      	mov	r1, r3
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f001 f9a3 	bl	8006bee <USBD_CtlSendData>
      break;
 80058a8:	e006      	b.n	80058b8 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 80058aa:	6839      	ldr	r1, [r7, #0]
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f001 f92d 	bl	8006b0c <USBD_CtlError>
      ret = USBD_FAIL;
 80058b2:	2303      	movs	r3, #3
 80058b4:	75fb      	strb	r3, [r7, #23]
      break;
 80058b6:	bf00      	nop
    }
    break;
 80058b8:	e097      	b.n	80059ea <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	785b      	ldrb	r3, [r3, #1]
 80058be:	2b0b      	cmp	r3, #11
 80058c0:	f200 8083 	bhi.w	80059ca <USBD_HID_Setup+0x1c2>
 80058c4:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <USBD_HID_Setup+0xc4>)
 80058c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ca:	bf00      	nop
 80058cc:	080058fd 	.word	0x080058fd
 80058d0:	080059d9 	.word	0x080059d9
 80058d4:	080059cb 	.word	0x080059cb
 80058d8:	080059cb 	.word	0x080059cb
 80058dc:	080059cb 	.word	0x080059cb
 80058e0:	080059cb 	.word	0x080059cb
 80058e4:	08005925 	.word	0x08005925
 80058e8:	080059cb 	.word	0x080059cb
 80058ec:	080059cb 	.word	0x080059cb
 80058f0:	080059cb 	.word	0x080059cb
 80058f4:	0800597d 	.word	0x0800597d
 80058f8:	080059a5 	.word	0x080059a5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005902:	2b03      	cmp	r3, #3
 8005904:	d107      	bne.n	8005916 <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005906:	f107 030a 	add.w	r3, r7, #10
 800590a:	2202      	movs	r2, #2
 800590c:	4619      	mov	r1, r3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f001 f96d 	bl	8006bee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005914:	e061      	b.n	80059da <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8005916:	6839      	ldr	r1, [r7, #0]
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f001 f8f7 	bl	8006b0c <USBD_CtlError>
        ret = USBD_FAIL;
 800591e:	2303      	movs	r3, #3
 8005920:	75fb      	strb	r3, [r7, #23]
      break;
 8005922:	e05a      	b.n	80059da <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	885b      	ldrh	r3, [r3, #2]
 8005928:	0a1b      	lsrs	r3, r3, #8
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b22      	cmp	r3, #34	; 0x22
 800592e:	d108      	bne.n	8005942 <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	88db      	ldrh	r3, [r3, #6]
 8005934:	2b4a      	cmp	r3, #74	; 0x4a
 8005936:	bf28      	it	cs
 8005938:	234a      	movcs	r3, #74	; 0x4a
 800593a:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 800593c:	4b2d      	ldr	r3, [pc, #180]	; (80059f4 <USBD_HID_Setup+0x1ec>)
 800593e:	613b      	str	r3, [r7, #16]
 8005940:	e015      	b.n	800596e <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	885b      	ldrh	r3, [r3, #2]
 8005946:	0a1b      	lsrs	r3, r3, #8
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b21      	cmp	r3, #33	; 0x21
 800594c:	d108      	bne.n	8005960 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 800594e:	4b2a      	ldr	r3, [pc, #168]	; (80059f8 <USBD_HID_Setup+0x1f0>)
 8005950:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	88db      	ldrh	r3, [r3, #6]
 8005956:	2b09      	cmp	r3, #9
 8005958:	bf28      	it	cs
 800595a:	2309      	movcs	r3, #9
 800595c:	82bb      	strh	r3, [r7, #20]
 800595e:	e006      	b.n	800596e <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005960:	6839      	ldr	r1, [r7, #0]
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f001 f8d2 	bl	8006b0c <USBD_CtlError>
        ret = USBD_FAIL;
 8005968:	2303      	movs	r3, #3
 800596a:	75fb      	strb	r3, [r7, #23]
        break;
 800596c:	e035      	b.n	80059da <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800596e:	8abb      	ldrh	r3, [r7, #20]
 8005970:	461a      	mov	r2, r3
 8005972:	6939      	ldr	r1, [r7, #16]
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f001 f93a 	bl	8006bee <USBD_CtlSendData>
      break;
 800597a:	e02e      	b.n	80059da <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005982:	2b03      	cmp	r3, #3
 8005984:	d107      	bne.n	8005996 <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3308      	adds	r3, #8
 800598a:	2201      	movs	r2, #1
 800598c:	4619      	mov	r1, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f001 f92d 	bl	8006bee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005994:	e021      	b.n	80059da <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8005996:	6839      	ldr	r1, [r7, #0]
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f001 f8b7 	bl	8006b0c <USBD_CtlError>
        ret = USBD_FAIL;
 800599e:	2303      	movs	r3, #3
 80059a0:	75fb      	strb	r3, [r7, #23]
      break;
 80059a2:	e01a      	b.n	80059da <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d106      	bne.n	80059bc <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	885b      	ldrh	r3, [r3, #2]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80059ba:	e00e      	b.n	80059da <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 80059bc:	6839      	ldr	r1, [r7, #0]
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f001 f8a4 	bl	8006b0c <USBD_CtlError>
        ret = USBD_FAIL;
 80059c4:	2303      	movs	r3, #3
 80059c6:	75fb      	strb	r3, [r7, #23]
      break;
 80059c8:	e007      	b.n	80059da <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 f89d 	bl	8006b0c <USBD_CtlError>
      ret = USBD_FAIL;
 80059d2:	2303      	movs	r3, #3
 80059d4:	75fb      	strb	r3, [r7, #23]
      break;
 80059d6:	e000      	b.n	80059da <USBD_HID_Setup+0x1d2>
      break;
 80059d8:	bf00      	nop
    }
    break;
 80059da:	e006      	b.n	80059ea <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 80059dc:	6839      	ldr	r1, [r7, #0]
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f001 f894 	bl	8006b0c <USBD_CtlError>
    ret = USBD_FAIL;
 80059e4:	2303      	movs	r3, #3
 80059e6:	75fb      	strb	r3, [r7, #23]
    break;
 80059e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80059ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	200000d8 	.word	0x200000d8
 80059f8:	200000c0 	.word	0x200000c0

080059fc <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	4613      	mov	r3, r2
 8005a08:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a10:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d10c      	bne.n	8005a36 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	7b1b      	ldrb	r3, [r3, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d108      	bne.n	8005a36 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2201      	movs	r2, #1
 8005a28:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8005a2a:	88fb      	ldrh	r3, [r7, #6]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	2181      	movs	r1, #129	; 0x81
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f001 fcf2 	bl	800741a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2222      	movs	r2, #34	; 0x22
 8005a4c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8005a4e:	4b03      	ldr	r3, [pc, #12]	; (8005a5c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	20000054 	.word	0x20000054

08005a60 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2222      	movs	r2, #34	; 0x22
 8005a6c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8005a6e:	4b03      	ldr	r3, [pc, #12]	; (8005a7c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	20000078 	.word	0x20000078

08005a80 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2222      	movs	r2, #34	; 0x22
 8005a8c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8005a8e:	4b03      	ldr	r3, [pc, #12]	; (8005a9c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	2000009c 	.word	0x2000009c

08005aa0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	220a      	movs	r2, #10
 8005ad0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005ad2:	4b03      	ldr	r3, [pc, #12]	; (8005ae0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	200000cc 	.word	0x200000cc

08005ae4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	4613      	mov	r3, r2
 8005af0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e025      	b.n	8005b48 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	79fa      	ldrb	r2, [r7, #7]
 8005b3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f001 fb37 	bl	80071b0 <USBD_LL_Init>
 8005b42:	4603      	mov	r3, r0
 8005b44:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3718      	adds	r7, #24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e010      	b.n	8005b8a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b78:	f107 020e 	add.w	r2, r7, #14
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	4798      	blx	r3
 8005b80:	4602      	mov	r2, r0
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b082      	sub	sp, #8
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f001 fb54 	bl	8007248 <USBD_LL_Start>
 8005ba0:	4603      	mov	r3, r0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	460b      	mov	r3, r1
 8005bca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d009      	beq.n	8005bee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	78fa      	ldrb	r2, [r7, #3]
 8005be4:	4611      	mov	r1, r2
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	4798      	blx	r3
 8005bea:	4603      	mov	r3, r0
 8005bec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d007      	beq.n	8005c1e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	78fa      	ldrb	r2, [r7, #3]
 8005c18:	4611      	mov	r1, r2
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	4798      	blx	r3
  }

  return USBD_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c38:	6839      	ldr	r1, [r7, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 ff2c 	bl	8006a98 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005c4e:	461a      	mov	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c5c:	f003 031f 	and.w	r3, r3, #31
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d00e      	beq.n	8005c82 <USBD_LL_SetupStage+0x5a>
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d302      	bcc.n	8005c6e <USBD_LL_SetupStage+0x46>
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d014      	beq.n	8005c96 <USBD_LL_SetupStage+0x6e>
 8005c6c:	e01d      	b.n	8005caa <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c74:	4619      	mov	r1, r3
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fa18 	bl	80060ac <USBD_StdDevReq>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c80:	e020      	b.n	8005cc4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c88:	4619      	mov	r1, r3
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fa7c 	bl	8006188 <USBD_StdItfReq>
 8005c90:	4603      	mov	r3, r0
 8005c92:	73fb      	strb	r3, [r7, #15]
      break;
 8005c94:	e016      	b.n	8005cc4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fab8 	bl	8006214 <USBD_StdEPReq>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ca8:	e00c      	b.n	8005cc4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005cb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f001 fb25 	bl	8007308 <USBD_LL_StallEP>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8005cc2:	bf00      	nop
  }

  return ret;
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b086      	sub	sp, #24
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60f8      	str	r0, [r7, #12]
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	607a      	str	r2, [r7, #4]
 8005cda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005cdc:	7afb      	ldrb	r3, [r7, #11]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d137      	bne.n	8005d52 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005ce8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d14a      	bne.n	8005d8a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d913      	bls.n	8005d28 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	1ad2      	subs	r2, r2, r3
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	4293      	cmp	r3, r2
 8005d18:	bf28      	it	cs
 8005d1a:	4613      	movcs	r3, r2
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	6879      	ldr	r1, [r7, #4]
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 ff90 	bl	8006c46 <USBD_CtlContinueRx>
 8005d26:	e030      	b.n	8005d8a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00a      	beq.n	8005d4a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d105      	bne.n	8005d4a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 ff8c 	bl	8006c68 <USBD_CtlSendStatus>
 8005d50:	e01b      	b.n	8005d8a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d013      	beq.n	8005d86 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d10e      	bne.n	8005d86 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	7afa      	ldrb	r2, [r7, #11]
 8005d72:	4611      	mov	r1, r2
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	4798      	blx	r3
 8005d78:	4603      	mov	r3, r0
 8005d7a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005d7c:	7dfb      	ldrb	r3, [r7, #23]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005d82:	7dfb      	ldrb	r3, [r7, #23]
 8005d84:	e002      	b.n	8005d8c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e000      	b.n	8005d8c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005da2:	7afb      	ldrb	r3, [r7, #11]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d16a      	bne.n	8005e7e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	3314      	adds	r3, #20
 8005dac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d155      	bne.n	8005e64 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d914      	bls.n	8005dee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	689a      	ldr	r2, [r3, #8]
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	1ad2      	subs	r2, r2, r3
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 ff22 	bl	8006c24 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005de0:	2300      	movs	r3, #0
 8005de2:	2200      	movs	r2, #0
 8005de4:	2100      	movs	r1, #0
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f001 fb38 	bl	800745c <USBD_LL_PrepareReceive>
 8005dec:	e03a      	b.n	8005e64 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d11c      	bne.n	8005e34 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d316      	bcc.n	8005e34 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d20f      	bcs.n	8005e34 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e14:	2200      	movs	r2, #0
 8005e16:	2100      	movs	r1, #0
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 ff03 	bl	8006c24 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e26:	2300      	movs	r3, #0
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f001 fb15 	bl	800745c <USBD_LL_PrepareReceive>
 8005e32:	e017      	b.n	8005e64 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00a      	beq.n	8005e56 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	d105      	bne.n	8005e56 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e56:	2180      	movs	r1, #128	; 0x80
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f001 fa55 	bl	8007308 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 ff15 	bl	8006c8e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d123      	bne.n	8005eb6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f7ff fe9b 	bl	8005baa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005e7c:	e01b      	b.n	8005eb6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d013      	beq.n	8005eb2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d10e      	bne.n	8005eb2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	7afa      	ldrb	r2, [r7, #11]
 8005e9e:	4611      	mov	r1, r2
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	4798      	blx	r3
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005ea8:	7dfb      	ldrb	r3, [r7, #23]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
 8005eb0:	e002      	b.n	8005eb8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e000      	b.n	8005eb8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d009      	beq.n	8005f04 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6852      	ldr	r2, [r2, #4]
 8005efc:	b2d2      	uxtb	r2, r2
 8005efe:	4611      	mov	r1, r2
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f04:	2340      	movs	r3, #64	; 0x40
 8005f06:	2200      	movs	r2, #0
 8005f08:	2100      	movs	r1, #0
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f001 f9b7 	bl	800727e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2240      	movs	r2, #64	; 0x40
 8005f1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f20:	2340      	movs	r3, #64	; 0x40
 8005f22:	2200      	movs	r2, #0
 8005f24:	2180      	movs	r1, #128	; 0x80
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f001 f9a9 	bl	800727e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2240      	movs	r2, #64	; 0x40
 8005f36:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	78fa      	ldrb	r2, [r7, #3]
 8005f52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2204      	movs	r2, #4
 8005f7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d105      	bne.n	8005faa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc6:	2b03      	cmp	r3, #3
 8005fc8:	d10b      	bne.n	8005fe2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d005      	beq.n	8005fe2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	460b      	mov	r3, r1
 8006010:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800604c:	2b00      	cmp	r3, #0
 800604e:	d009      	beq.n	8006064 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	6852      	ldr	r2, [r2, #4]
 800605c:	b2d2      	uxtb	r2, r2
 800605e:	4611      	mov	r1, r2
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	4798      	blx	r3
  }

  return USBD_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800606e:	b480      	push	{r7}
 8006070:	b087      	sub	sp, #28
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	3301      	adds	r3, #1
 8006084:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800608c:	8a3b      	ldrh	r3, [r7, #16]
 800608e:	021b      	lsls	r3, r3, #8
 8006090:	b21a      	sxth	r2, r3
 8006092:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006096:	4313      	orrs	r3, r2
 8006098:	b21b      	sxth	r3, r3
 800609a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800609c:	89fb      	ldrh	r3, [r7, #14]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	371c      	adds	r7, #28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
	...

080060ac <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060c2:	2b20      	cmp	r3, #32
 80060c4:	d004      	beq.n	80060d0 <USBD_StdDevReq+0x24>
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d002      	beq.n	80060d0 <USBD_StdDevReq+0x24>
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <USBD_StdDevReq+0x38>
 80060ce:	e050      	b.n	8006172 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	6839      	ldr	r1, [r7, #0]
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	4798      	blx	r3
 80060de:	4603      	mov	r3, r0
 80060e0:	73fb      	strb	r3, [r7, #15]
    break;
 80060e2:	e04b      	b.n	800617c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	785b      	ldrb	r3, [r3, #1]
 80060e8:	2b09      	cmp	r3, #9
 80060ea:	d83c      	bhi.n	8006166 <USBD_StdDevReq+0xba>
 80060ec:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <USBD_StdDevReq+0x48>)
 80060ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f2:	bf00      	nop
 80060f4:	08006149 	.word	0x08006149
 80060f8:	0800615d 	.word	0x0800615d
 80060fc:	08006167 	.word	0x08006167
 8006100:	08006153 	.word	0x08006153
 8006104:	08006167 	.word	0x08006167
 8006108:	08006127 	.word	0x08006127
 800610c:	0800611d 	.word	0x0800611d
 8006110:	08006167 	.word	0x08006167
 8006114:	0800613f 	.word	0x0800613f
 8006118:	08006131 	.word	0x08006131
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800611c:	6839      	ldr	r1, [r7, #0]
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f9ce 	bl	80064c0 <USBD_GetDescriptor>
      break;
 8006124:	e024      	b.n	8006170 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fb33 	bl	8006794 <USBD_SetAddress>
      break;
 800612e:	e01f      	b.n	8006170 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006130:	6839      	ldr	r1, [r7, #0]
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fb70 	bl	8006818 <USBD_SetConfig>
 8006138:	4603      	mov	r3, r0
 800613a:	73fb      	strb	r3, [r7, #15]
      break;
 800613c:	e018      	b.n	8006170 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800613e:	6839      	ldr	r1, [r7, #0]
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fc0d 	bl	8006960 <USBD_GetConfig>
      break;
 8006146:	e013      	b.n	8006170 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fc3c 	bl	80069c8 <USBD_GetStatus>
      break;
 8006150:	e00e      	b.n	8006170 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006152:	6839      	ldr	r1, [r7, #0]
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fc6a 	bl	8006a2e <USBD_SetFeature>
      break;
 800615a:	e009      	b.n	8006170 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800615c:	6839      	ldr	r1, [r7, #0]
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fc79 	bl	8006a56 <USBD_ClrFeature>
      break;
 8006164:	e004      	b.n	8006170 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006166:	6839      	ldr	r1, [r7, #0]
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fccf 	bl	8006b0c <USBD_CtlError>
      break;
 800616e:	bf00      	nop
    }
    break;
 8006170:	e004      	b.n	800617c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fcc9 	bl	8006b0c <USBD_CtlError>
    break;
 800617a:	bf00      	nop
  }

  return ret;
 800617c:	7bfb      	ldrb	r3, [r7, #15]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop

08006188 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d003      	beq.n	80061aa <USBD_StdItfReq+0x22>
 80061a2:	2b40      	cmp	r3, #64	; 0x40
 80061a4:	d001      	beq.n	80061aa <USBD_StdItfReq+0x22>
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d12a      	bne.n	8006200 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b0:	3b01      	subs	r3, #1
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d81d      	bhi.n	80061f2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	889b      	ldrh	r3, [r3, #4]
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d813      	bhi.n	80061e8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	4798      	blx	r3
 80061ce:	4603      	mov	r3, r0
 80061d0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	88db      	ldrh	r3, [r3, #6]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d110      	bne.n	80061fc <USBD_StdItfReq+0x74>
 80061da:	7bfb      	ldrb	r3, [r7, #15]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10d      	bne.n	80061fc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 fd41 	bl	8006c68 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80061e6:	e009      	b.n	80061fc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80061e8:	6839      	ldr	r1, [r7, #0]
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fc8e 	bl	8006b0c <USBD_CtlError>
      break;
 80061f0:	e004      	b.n	80061fc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fc89 	bl	8006b0c <USBD_CtlError>
      break;
 80061fa:	e000      	b.n	80061fe <USBD_StdItfReq+0x76>
      break;
 80061fc:	bf00      	nop
    }
    break;
 80061fe:	e004      	b.n	800620a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fc82 	bl	8006b0c <USBD_CtlError>
    break;
 8006208:	bf00      	nop
  }

  return ret;
 800620a:	7bfb      	ldrb	r3, [r7, #15]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	889b      	ldrh	r3, [r3, #4]
 8006226:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006230:	2b20      	cmp	r3, #32
 8006232:	d004      	beq.n	800623e <USBD_StdEPReq+0x2a>
 8006234:	2b40      	cmp	r3, #64	; 0x40
 8006236:	d002      	beq.n	800623e <USBD_StdEPReq+0x2a>
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00a      	beq.n	8006252 <USBD_StdEPReq+0x3e>
 800623c:	e135      	b.n	80064aa <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	6839      	ldr	r1, [r7, #0]
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	4798      	blx	r3
 800624c:	4603      	mov	r3, r0
 800624e:	73fb      	strb	r3, [r7, #15]
    break;
 8006250:	e130      	b.n	80064b4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	785b      	ldrb	r3, [r3, #1]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d03e      	beq.n	80062d8 <USBD_StdEPReq+0xc4>
 800625a:	2b03      	cmp	r3, #3
 800625c:	d002      	beq.n	8006264 <USBD_StdEPReq+0x50>
 800625e:	2b00      	cmp	r3, #0
 8006260:	d077      	beq.n	8006352 <USBD_StdEPReq+0x13e>
 8006262:	e11c      	b.n	800649e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800626a:	2b02      	cmp	r3, #2
 800626c:	d002      	beq.n	8006274 <USBD_StdEPReq+0x60>
 800626e:	2b03      	cmp	r3, #3
 8006270:	d015      	beq.n	800629e <USBD_StdEPReq+0x8a>
 8006272:	e02b      	b.n	80062cc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006274:	7bbb      	ldrb	r3, [r7, #14]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00c      	beq.n	8006294 <USBD_StdEPReq+0x80>
 800627a:	7bbb      	ldrb	r3, [r7, #14]
 800627c:	2b80      	cmp	r3, #128	; 0x80
 800627e:	d009      	beq.n	8006294 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006280:	7bbb      	ldrb	r3, [r7, #14]
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f001 f83f 	bl	8007308 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800628a:	2180      	movs	r1, #128	; 0x80
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f001 f83b 	bl	8007308 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006292:	e020      	b.n	80062d6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fc38 	bl	8006b0c <USBD_CtlError>
        break;
 800629c:	e01b      	b.n	80062d6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	885b      	ldrh	r3, [r3, #2]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10e      	bne.n	80062c4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80062a6:	7bbb      	ldrb	r3, [r7, #14]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00b      	beq.n	80062c4 <USBD_StdEPReq+0xb0>
 80062ac:	7bbb      	ldrb	r3, [r7, #14]
 80062ae:	2b80      	cmp	r3, #128	; 0x80
 80062b0:	d008      	beq.n	80062c4 <USBD_StdEPReq+0xb0>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	88db      	ldrh	r3, [r3, #6]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d104      	bne.n	80062c4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80062ba:	7bbb      	ldrb	r3, [r7, #14]
 80062bc:	4619      	mov	r1, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f001 f822 	bl	8007308 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fccf 	bl	8006c68 <USBD_CtlSendStatus>

        break;
 80062ca:	e004      	b.n	80062d6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80062cc:	6839      	ldr	r1, [r7, #0]
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fc1c 	bl	8006b0c <USBD_CtlError>
        break;
 80062d4:	bf00      	nop
      }
      break;
 80062d6:	e0e7      	b.n	80064a8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d002      	beq.n	80062e8 <USBD_StdEPReq+0xd4>
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d015      	beq.n	8006312 <USBD_StdEPReq+0xfe>
 80062e6:	e02d      	b.n	8006344 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062e8:	7bbb      	ldrb	r3, [r7, #14]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00c      	beq.n	8006308 <USBD_StdEPReq+0xf4>
 80062ee:	7bbb      	ldrb	r3, [r7, #14]
 80062f0:	2b80      	cmp	r3, #128	; 0x80
 80062f2:	d009      	beq.n	8006308 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80062f4:	7bbb      	ldrb	r3, [r7, #14]
 80062f6:	4619      	mov	r1, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 f805 	bl	8007308 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80062fe:	2180      	movs	r1, #128	; 0x80
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f001 f801 	bl	8007308 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006306:	e023      	b.n	8006350 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006308:	6839      	ldr	r1, [r7, #0]
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fbfe 	bl	8006b0c <USBD_CtlError>
        break;
 8006310:	e01e      	b.n	8006350 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	885b      	ldrh	r3, [r3, #2]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d119      	bne.n	800634e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800631a:	7bbb      	ldrb	r3, [r7, #14]
 800631c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006320:	2b00      	cmp	r3, #0
 8006322:	d004      	beq.n	800632e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006324:	7bbb      	ldrb	r3, [r7, #14]
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 f80c 	bl	8007346 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fc9a 	bl	8006c68 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	4798      	blx	r3
        }
        break;
 8006342:	e004      	b.n	800634e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fbe0 	bl	8006b0c <USBD_CtlError>
        break;
 800634c:	e000      	b.n	8006350 <USBD_StdEPReq+0x13c>
        break;
 800634e:	bf00      	nop
      }
      break;
 8006350:	e0aa      	b.n	80064a8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006358:	2b02      	cmp	r3, #2
 800635a:	d002      	beq.n	8006362 <USBD_StdEPReq+0x14e>
 800635c:	2b03      	cmp	r3, #3
 800635e:	d032      	beq.n	80063c6 <USBD_StdEPReq+0x1b2>
 8006360:	e097      	b.n	8006492 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006362:	7bbb      	ldrb	r3, [r7, #14]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d007      	beq.n	8006378 <USBD_StdEPReq+0x164>
 8006368:	7bbb      	ldrb	r3, [r7, #14]
 800636a:	2b80      	cmp	r3, #128	; 0x80
 800636c:	d004      	beq.n	8006378 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fbcb 	bl	8006b0c <USBD_CtlError>
          break;
 8006376:	e091      	b.n	800649c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006378:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800637c:	2b00      	cmp	r3, #0
 800637e:	da0b      	bge.n	8006398 <USBD_StdEPReq+0x184>
 8006380:	7bbb      	ldrb	r3, [r7, #14]
 8006382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006386:	4613      	mov	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	3310      	adds	r3, #16
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	4413      	add	r3, r2
 8006394:	3304      	adds	r3, #4
 8006396:	e00b      	b.n	80063b0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006398:	7bbb      	ldrb	r3, [r7, #14]
 800639a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800639e:	4613      	mov	r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	4413      	add	r3, r2
 80063ae:	3304      	adds	r3, #4
 80063b0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2202      	movs	r2, #2
 80063bc:	4619      	mov	r1, r3
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fc15 	bl	8006bee <USBD_CtlSendData>
        break;
 80063c4:	e06a      	b.n	800649c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80063c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	da11      	bge.n	80063f2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80063ce:	7bbb      	ldrb	r3, [r7, #14]
 80063d0:	f003 020f 	and.w	r2, r3, #15
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	4613      	mov	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	440b      	add	r3, r1
 80063e0:	3324      	adds	r3, #36	; 0x24
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d117      	bne.n	8006418 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fb8e 	bl	8006b0c <USBD_CtlError>
            break;
 80063f0:	e054      	b.n	800649c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80063f2:	7bbb      	ldrb	r3, [r7, #14]
 80063f4:	f003 020f 	and.w	r2, r3, #15
 80063f8:	6879      	ldr	r1, [r7, #4]
 80063fa:	4613      	mov	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	440b      	add	r3, r1
 8006404:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d104      	bne.n	8006418 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800640e:	6839      	ldr	r1, [r7, #0]
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fb7b 	bl	8006b0c <USBD_CtlError>
            break;
 8006416:	e041      	b.n	800649c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006418:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800641c:	2b00      	cmp	r3, #0
 800641e:	da0b      	bge.n	8006438 <USBD_StdEPReq+0x224>
 8006420:	7bbb      	ldrb	r3, [r7, #14]
 8006422:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006426:	4613      	mov	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	3310      	adds	r3, #16
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	4413      	add	r3, r2
 8006434:	3304      	adds	r3, #4
 8006436:	e00b      	b.n	8006450 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006438:	7bbb      	ldrb	r3, [r7, #14]
 800643a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800643e:	4613      	mov	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	4413      	add	r3, r2
 800644e:	3304      	adds	r3, #4
 8006450:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006452:	7bbb      	ldrb	r3, [r7, #14]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <USBD_StdEPReq+0x24a>
 8006458:	7bbb      	ldrb	r3, [r7, #14]
 800645a:	2b80      	cmp	r3, #128	; 0x80
 800645c:	d103      	bne.n	8006466 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2200      	movs	r2, #0
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	e00e      	b.n	8006484 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006466:	7bbb      	ldrb	r3, [r7, #14]
 8006468:	4619      	mov	r1, r3
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 ff8a 	bl	8007384 <USBD_LL_IsStallEP>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2201      	movs	r2, #1
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	e002      	b.n	8006484 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2200      	movs	r2, #0
 8006482:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2202      	movs	r2, #2
 8006488:	4619      	mov	r1, r3
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fbaf 	bl	8006bee <USBD_CtlSendData>
          break;
 8006490:	e004      	b.n	800649c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006492:	6839      	ldr	r1, [r7, #0]
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 fb39 	bl	8006b0c <USBD_CtlError>
        break;
 800649a:	bf00      	nop
      }
      break;
 800649c:	e004      	b.n	80064a8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fb33 	bl	8006b0c <USBD_CtlError>
      break;
 80064a6:	bf00      	nop
    }
    break;
 80064a8:	e004      	b.n	80064b4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fb2d 	bl	8006b0c <USBD_CtlError>
    break;
 80064b2:	bf00      	nop
  }

  return ret;
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
	...

080064c0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80064ce:	2300      	movs	r3, #0
 80064d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	885b      	ldrh	r3, [r3, #2]
 80064da:	0a1b      	lsrs	r3, r3, #8
 80064dc:	b29b      	uxth	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	2b06      	cmp	r3, #6
 80064e2:	f200 8128 	bhi.w	8006736 <USBD_GetDescriptor+0x276>
 80064e6:	a201      	add	r2, pc, #4	; (adr r2, 80064ec <USBD_GetDescriptor+0x2c>)
 80064e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ec:	08006509 	.word	0x08006509
 80064f0:	08006521 	.word	0x08006521
 80064f4:	08006561 	.word	0x08006561
 80064f8:	08006737 	.word	0x08006737
 80064fc:	08006737 	.word	0x08006737
 8006500:	080066d7 	.word	0x080066d7
 8006504:	08006703 	.word	0x08006703
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	7c12      	ldrb	r2, [r2, #16]
 8006514:	f107 0108 	add.w	r1, r7, #8
 8006518:	4610      	mov	r0, r2
 800651a:	4798      	blx	r3
 800651c:	60f8      	str	r0, [r7, #12]
    break;
 800651e:	e112      	b.n	8006746 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	7c1b      	ldrb	r3, [r3, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10d      	bne.n	8006544 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800652e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006530:	f107 0208 	add.w	r2, r7, #8
 8006534:	4610      	mov	r0, r2
 8006536:	4798      	blx	r3
 8006538:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	3301      	adds	r3, #1
 800653e:	2202      	movs	r2, #2
 8006540:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006542:	e100      	b.n	8006746 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	f107 0208 	add.w	r2, r7, #8
 8006550:	4610      	mov	r0, r2
 8006552:	4798      	blx	r3
 8006554:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	3301      	adds	r3, #1
 800655a:	2202      	movs	r2, #2
 800655c:	701a      	strb	r2, [r3, #0]
    break;
 800655e:	e0f2      	b.n	8006746 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	885b      	ldrh	r3, [r3, #2]
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b05      	cmp	r3, #5
 8006568:	f200 80ac 	bhi.w	80066c4 <USBD_GetDescriptor+0x204>
 800656c:	a201      	add	r2, pc, #4	; (adr r2, 8006574 <USBD_GetDescriptor+0xb4>)
 800656e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006572:	bf00      	nop
 8006574:	0800658d 	.word	0x0800658d
 8006578:	080065c1 	.word	0x080065c1
 800657c:	080065f5 	.word	0x080065f5
 8006580:	08006629 	.word	0x08006629
 8006584:	0800665d 	.word	0x0800665d
 8006588:	08006691 	.word	0x08006691
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00b      	beq.n	80065b0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	7c12      	ldrb	r2, [r2, #16]
 80065a4:	f107 0108 	add.w	r1, r7, #8
 80065a8:	4610      	mov	r0, r2
 80065aa:	4798      	blx	r3
 80065ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065ae:	e091      	b.n	80066d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 faaa 	bl	8006b0c <USBD_CtlError>
        err++;
 80065b8:	7afb      	ldrb	r3, [r7, #11]
 80065ba:	3301      	adds	r3, #1
 80065bc:	72fb      	strb	r3, [r7, #11]
      break;
 80065be:	e089      	b.n	80066d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00b      	beq.n	80065e4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	7c12      	ldrb	r2, [r2, #16]
 80065d8:	f107 0108 	add.w	r1, r7, #8
 80065dc:	4610      	mov	r0, r2
 80065de:	4798      	blx	r3
 80065e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065e2:	e077      	b.n	80066d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fa90 	bl	8006b0c <USBD_CtlError>
        err++;
 80065ec:	7afb      	ldrb	r3, [r7, #11]
 80065ee:	3301      	adds	r3, #1
 80065f0:	72fb      	strb	r3, [r7, #11]
      break;
 80065f2:	e06f      	b.n	80066d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00b      	beq.n	8006618 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	7c12      	ldrb	r2, [r2, #16]
 800660c:	f107 0108 	add.w	r1, r7, #8
 8006610:	4610      	mov	r0, r2
 8006612:	4798      	blx	r3
 8006614:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006616:	e05d      	b.n	80066d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fa76 	bl	8006b0c <USBD_CtlError>
        err++;
 8006620:	7afb      	ldrb	r3, [r7, #11]
 8006622:	3301      	adds	r3, #1
 8006624:	72fb      	strb	r3, [r7, #11]
      break;
 8006626:	e055      	b.n	80066d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00b      	beq.n	800664c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	7c12      	ldrb	r2, [r2, #16]
 8006640:	f107 0108 	add.w	r1, r7, #8
 8006644:	4610      	mov	r0, r2
 8006646:	4798      	blx	r3
 8006648:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800664a:	e043      	b.n	80066d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fa5c 	bl	8006b0c <USBD_CtlError>
        err++;
 8006654:	7afb      	ldrb	r3, [r7, #11]
 8006656:	3301      	adds	r3, #1
 8006658:	72fb      	strb	r3, [r7, #11]
      break;
 800665a:	e03b      	b.n	80066d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00b      	beq.n	8006680 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	7c12      	ldrb	r2, [r2, #16]
 8006674:	f107 0108 	add.w	r1, r7, #8
 8006678:	4610      	mov	r0, r2
 800667a:	4798      	blx	r3
 800667c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800667e:	e029      	b.n	80066d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006680:	6839      	ldr	r1, [r7, #0]
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fa42 	bl	8006b0c <USBD_CtlError>
        err++;
 8006688:	7afb      	ldrb	r3, [r7, #11]
 800668a:	3301      	adds	r3, #1
 800668c:	72fb      	strb	r3, [r7, #11]
      break;
 800668e:	e021      	b.n	80066d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00b      	beq.n	80066b4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	7c12      	ldrb	r2, [r2, #16]
 80066a8:	f107 0108 	add.w	r1, r7, #8
 80066ac:	4610      	mov	r0, r2
 80066ae:	4798      	blx	r3
 80066b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066b2:	e00f      	b.n	80066d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80066b4:	6839      	ldr	r1, [r7, #0]
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fa28 	bl	8006b0c <USBD_CtlError>
        err++;
 80066bc:	7afb      	ldrb	r3, [r7, #11]
 80066be:	3301      	adds	r3, #1
 80066c0:	72fb      	strb	r3, [r7, #11]
      break;
 80066c2:	e007      	b.n	80066d4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80066c4:	6839      	ldr	r1, [r7, #0]
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fa20 	bl	8006b0c <USBD_CtlError>
      err++;
 80066cc:	7afb      	ldrb	r3, [r7, #11]
 80066ce:	3301      	adds	r3, #1
 80066d0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80066d2:	bf00      	nop
    }
    break;
 80066d4:	e037      	b.n	8006746 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	7c1b      	ldrb	r3, [r3, #16]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d109      	bne.n	80066f2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e6:	f107 0208 	add.w	r2, r7, #8
 80066ea:	4610      	mov	r0, r2
 80066ec:	4798      	blx	r3
 80066ee:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80066f0:	e029      	b.n	8006746 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80066f2:	6839      	ldr	r1, [r7, #0]
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fa09 	bl	8006b0c <USBD_CtlError>
      err++;
 80066fa:	7afb      	ldrb	r3, [r7, #11]
 80066fc:	3301      	adds	r3, #1
 80066fe:	72fb      	strb	r3, [r7, #11]
    break;
 8006700:	e021      	b.n	8006746 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	7c1b      	ldrb	r3, [r3, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10d      	bne.n	8006726 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006712:	f107 0208 	add.w	r2, r7, #8
 8006716:	4610      	mov	r0, r2
 8006718:	4798      	blx	r3
 800671a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	3301      	adds	r3, #1
 8006720:	2207      	movs	r2, #7
 8006722:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006724:	e00f      	b.n	8006746 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006726:	6839      	ldr	r1, [r7, #0]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f9ef 	bl	8006b0c <USBD_CtlError>
      err++;
 800672e:	7afb      	ldrb	r3, [r7, #11]
 8006730:	3301      	adds	r3, #1
 8006732:	72fb      	strb	r3, [r7, #11]
    break;
 8006734:	e007      	b.n	8006746 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006736:	6839      	ldr	r1, [r7, #0]
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f9e7 	bl	8006b0c <USBD_CtlError>
    err++;
 800673e:	7afb      	ldrb	r3, [r7, #11]
 8006740:	3301      	adds	r3, #1
 8006742:	72fb      	strb	r3, [r7, #11]
    break;
 8006744:	bf00      	nop
  }

  if (err != 0U)
 8006746:	7afb      	ldrb	r3, [r7, #11]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d11e      	bne.n	800678a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	88db      	ldrh	r3, [r3, #6]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d016      	beq.n	8006782 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006754:	893b      	ldrh	r3, [r7, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00e      	beq.n	8006778 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	88da      	ldrh	r2, [r3, #6]
 800675e:	893b      	ldrh	r3, [r7, #8]
 8006760:	4293      	cmp	r3, r2
 8006762:	bf28      	it	cs
 8006764:	4613      	movcs	r3, r2
 8006766:	b29b      	uxth	r3, r3
 8006768:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800676a:	893b      	ldrh	r3, [r7, #8]
 800676c:	461a      	mov	r2, r3
 800676e:	68f9      	ldr	r1, [r7, #12]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fa3c 	bl	8006bee <USBD_CtlSendData>
 8006776:	e009      	b.n	800678c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f9c6 	bl	8006b0c <USBD_CtlError>
 8006780:	e004      	b.n	800678c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fa70 	bl	8006c68 <USBD_CtlSendStatus>
 8006788:	e000      	b.n	800678c <USBD_GetDescriptor+0x2cc>
    return;
 800678a:	bf00      	nop
    }
  }
}
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop

08006794 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	889b      	ldrh	r3, [r3, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d130      	bne.n	8006808 <USBD_SetAddress+0x74>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	88db      	ldrh	r3, [r3, #6]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d12c      	bne.n	8006808 <USBD_SetAddress+0x74>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	885b      	ldrh	r3, [r3, #2]
 80067b2:	2b7f      	cmp	r3, #127	; 0x7f
 80067b4:	d828      	bhi.n	8006808 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	885b      	ldrh	r3, [r3, #2]
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067c8:	2b03      	cmp	r3, #3
 80067ca:	d104      	bne.n	80067d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f99c 	bl	8006b0c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067d4:	e01c      	b.n	8006810 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	7bfa      	ldrb	r2, [r7, #15]
 80067da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80067de:	7bfb      	ldrb	r3, [r7, #15]
 80067e0:	4619      	mov	r1, r3
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fdfa 	bl	80073dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fa3d 	bl	8006c68 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d004      	beq.n	80067fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067fc:	e008      	b.n	8006810 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006806:	e003      	b.n	8006810 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f97e 	bl	8006b0c <USBD_CtlError>
  }
}
 8006810:	bf00      	nop
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006822:	2300      	movs	r3, #0
 8006824:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	885b      	ldrh	r3, [r3, #2]
 800682a:	b2da      	uxtb	r2, r3
 800682c:	4b4b      	ldr	r3, [pc, #300]	; (800695c <USBD_SetConfig+0x144>)
 800682e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006830:	4b4a      	ldr	r3, [pc, #296]	; (800695c <USBD_SetConfig+0x144>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d905      	bls.n	8006844 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f966 	bl	8006b0c <USBD_CtlError>
    return USBD_FAIL;
 8006840:	2303      	movs	r3, #3
 8006842:	e087      	b.n	8006954 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800684a:	2b02      	cmp	r3, #2
 800684c:	d002      	beq.n	8006854 <USBD_SetConfig+0x3c>
 800684e:	2b03      	cmp	r3, #3
 8006850:	d025      	beq.n	800689e <USBD_SetConfig+0x86>
 8006852:	e071      	b.n	8006938 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006854:	4b41      	ldr	r3, [pc, #260]	; (800695c <USBD_SetConfig+0x144>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01c      	beq.n	8006896 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800685c:	4b3f      	ldr	r3, [pc, #252]	; (800695c <USBD_SetConfig+0x144>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	461a      	mov	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006866:	4b3d      	ldr	r3, [pc, #244]	; (800695c <USBD_SetConfig+0x144>)
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff f9a7 	bl	8005bc0 <USBD_SetClassConfig>
 8006872:	4603      	mov	r3, r0
 8006874:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006876:	7bfb      	ldrb	r3, [r7, #15]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d004      	beq.n	8006886 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f944 	bl	8006b0c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006884:	e065      	b.n	8006952 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f9ee 	bl	8006c68 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2203      	movs	r2, #3
 8006890:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006894:	e05d      	b.n	8006952 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f9e6 	bl	8006c68 <USBD_CtlSendStatus>
    break;
 800689c:	e059      	b.n	8006952 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800689e:	4b2f      	ldr	r3, [pc, #188]	; (800695c <USBD_SetConfig+0x144>)
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d112      	bne.n	80068cc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2202      	movs	r2, #2
 80068aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80068ae:	4b2b      	ldr	r3, [pc, #172]	; (800695c <USBD_SetConfig+0x144>)
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80068b8:	4b28      	ldr	r3, [pc, #160]	; (800695c <USBD_SetConfig+0x144>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7ff f99a 	bl	8005bf8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f9cf 	bl	8006c68 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80068ca:	e042      	b.n	8006952 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80068cc:	4b23      	ldr	r3, [pc, #140]	; (800695c <USBD_SetConfig+0x144>)
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	461a      	mov	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d02a      	beq.n	8006930 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7ff f988 	bl	8005bf8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80068e8:	4b1c      	ldr	r3, [pc, #112]	; (800695c <USBD_SetConfig+0x144>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	461a      	mov	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80068f2:	4b1a      	ldr	r3, [pc, #104]	; (800695c <USBD_SetConfig+0x144>)
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7ff f961 	bl	8005bc0 <USBD_SetClassConfig>
 80068fe:	4603      	mov	r3, r0
 8006900:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006902:	7bfb      	ldrb	r3, [r7, #15]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00f      	beq.n	8006928 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006908:	6839      	ldr	r1, [r7, #0]
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f8fe 	bl	8006b0c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	b2db      	uxtb	r3, r3
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7ff f96d 	bl	8005bf8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2202      	movs	r2, #2
 8006922:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006926:	e014      	b.n	8006952 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f99d 	bl	8006c68 <USBD_CtlSendStatus>
    break;
 800692e:	e010      	b.n	8006952 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f999 	bl	8006c68 <USBD_CtlSendStatus>
    break;
 8006936:	e00c      	b.n	8006952 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f8e6 	bl	8006b0c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006940:	4b06      	ldr	r3, [pc, #24]	; (800695c <USBD_SetConfig+0x144>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff f956 	bl	8005bf8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800694c:	2303      	movs	r3, #3
 800694e:	73fb      	strb	r3, [r7, #15]
    break;
 8006950:	bf00      	nop
  }

  return ret;
 8006952:	7bfb      	ldrb	r3, [r7, #15]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	200001fc 	.word	0x200001fc

08006960 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	88db      	ldrh	r3, [r3, #6]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d004      	beq.n	800697c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006972:	6839      	ldr	r1, [r7, #0]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f8c9 	bl	8006b0c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800697a:	e021      	b.n	80069c0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006982:	2b01      	cmp	r3, #1
 8006984:	db17      	blt.n	80069b6 <USBD_GetConfig+0x56>
 8006986:	2b02      	cmp	r3, #2
 8006988:	dd02      	ble.n	8006990 <USBD_GetConfig+0x30>
 800698a:	2b03      	cmp	r3, #3
 800698c:	d00b      	beq.n	80069a6 <USBD_GetConfig+0x46>
 800698e:	e012      	b.n	80069b6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	3308      	adds	r3, #8
 800699a:	2201      	movs	r2, #1
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f925 	bl	8006bee <USBD_CtlSendData>
      break;
 80069a4:	e00c      	b.n	80069c0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3304      	adds	r3, #4
 80069aa:	2201      	movs	r2, #1
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f91d 	bl	8006bee <USBD_CtlSendData>
      break;
 80069b4:	e004      	b.n	80069c0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f8a7 	bl	8006b0c <USBD_CtlError>
      break;
 80069be:	bf00      	nop
}
 80069c0:	bf00      	nop
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d8:	3b01      	subs	r3, #1
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d81e      	bhi.n	8006a1c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	88db      	ldrh	r3, [r3, #6]
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d004      	beq.n	80069f0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f88f 	bl	8006b0c <USBD_CtlError>
      break;
 80069ee:	e01a      	b.n	8006a26 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d005      	beq.n	8006a0c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f043 0202 	orr.w	r2, r3, #2
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	330c      	adds	r3, #12
 8006a10:	2202      	movs	r2, #2
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f8ea 	bl	8006bee <USBD_CtlSendData>
    break;
 8006a1a:	e004      	b.n	8006a26 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f874 	bl	8006b0c <USBD_CtlError>
    break;
 8006a24:	bf00      	nop
  }
}
 8006a26:	bf00      	nop
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b082      	sub	sp, #8
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	885b      	ldrh	r3, [r3, #2]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d106      	bne.n	8006a4e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f90d 	bl	8006c68 <USBD_CtlSendStatus>
  }
}
 8006a4e:	bf00      	nop
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b082      	sub	sp, #8
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a66:	3b01      	subs	r3, #1
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d80b      	bhi.n	8006a84 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	885b      	ldrh	r3, [r3, #2]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d10c      	bne.n	8006a8e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f8f3 	bl	8006c68 <USBD_CtlSendStatus>
      }
      break;
 8006a82:	e004      	b.n	8006a8e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f840 	bl	8006b0c <USBD_CtlError>
      break;
 8006a8c:	e000      	b.n	8006a90 <USBD_ClrFeature+0x3a>
      break;
 8006a8e:	bf00      	nop
  }
}
 8006a90:	bf00      	nop
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	781a      	ldrb	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	781a      	ldrb	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f7ff fad3 	bl	800606e <SWAPBYTE>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	461a      	mov	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f7ff fac6 	bl	800606e <SWAPBYTE>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3301      	adds	r3, #1
 8006aee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	3301      	adds	r3, #1
 8006af4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f7ff fab9 	bl	800606e <SWAPBYTE>
 8006afc:	4603      	mov	r3, r0
 8006afe:	461a      	mov	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	80da      	strh	r2, [r3, #6]
}
 8006b04:	bf00      	nop
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b16:	2180      	movs	r1, #128	; 0x80
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fbf5 	bl	8007308 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006b1e:	2100      	movs	r1, #0
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fbf1 	bl	8007308 <USBD_LL_StallEP>
}
 8006b26:	bf00      	nop
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b086      	sub	sp, #24
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	60f8      	str	r0, [r7, #12]
 8006b36:	60b9      	str	r1, [r7, #8]
 8006b38:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d036      	beq.n	8006bb2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006b48:	6938      	ldr	r0, [r7, #16]
 8006b4a:	f000 f836 	bl	8006bba <USBD_GetLen>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	3301      	adds	r3, #1
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	005b      	lsls	r3, r3, #1
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006b5c:	7dfb      	ldrb	r3, [r7, #23]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	4413      	add	r3, r2
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	7812      	ldrb	r2, [r2, #0]
 8006b66:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	4413      	add	r3, r2
 8006b74:	2203      	movs	r2, #3
 8006b76:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b78:	7dfb      	ldrb	r3, [r7, #23]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006b7e:	e013      	b.n	8006ba8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006b80:	7dfb      	ldrb	r3, [r7, #23]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	4413      	add	r3, r2
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	7812      	ldrb	r2, [r2, #0]
 8006b8a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	613b      	str	r3, [r7, #16]
    idx++;
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
 8006b94:	3301      	adds	r3, #1
 8006b96:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006b98:	7dfb      	ldrb	r3, [r7, #23]
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	701a      	strb	r2, [r3, #0]
    idx++;
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1e7      	bne.n	8006b80 <USBD_GetString+0x52>
 8006bb0:	e000      	b.n	8006bb4 <USBD_GetString+0x86>
    return;
 8006bb2:	bf00      	nop
  }
}
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b085      	sub	sp, #20
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006bca:	e005      	b.n	8006bd8 <USBD_GetLen+0x1e>
  {
    len++;
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1f5      	bne.n	8006bcc <USBD_GetLen+0x12>
  }

  return len;
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	60f8      	str	r0, [r7, #12]
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	2100      	movs	r1, #0
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 fc00 	bl	800741a <USBD_LL_Transmit>

  return USBD_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	2100      	movs	r1, #0
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f000 fbef 	bl	800741a <USBD_LL_Transmit>

  return USBD_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b084      	sub	sp, #16
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	60f8      	str	r0, [r7, #12]
 8006c4e:	60b9      	str	r1, [r7, #8]
 8006c50:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	2100      	movs	r1, #0
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 fbff 	bl	800745c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2204      	movs	r2, #4
 8006c74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006c78:	2300      	movs	r3, #0
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fbcb 	bl	800741a <USBD_LL_Transmit>

  return USBD_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b082      	sub	sp, #8
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2205      	movs	r2, #5
 8006c9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fbd9 	bl	800745c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	490e      	ldr	r1, [pc, #56]	; (8006cf4 <MX_USB_DEVICE_Init+0x40>)
 8006cbc:	480e      	ldr	r0, [pc, #56]	; (8006cf8 <MX_USB_DEVICE_Init+0x44>)
 8006cbe:	f7fe ff11 	bl	8005ae4 <USBD_Init>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006cc8:	f7f9 ff2c 	bl	8000b24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006ccc:	490b      	ldr	r1, [pc, #44]	; (8006cfc <MX_USB_DEVICE_Init+0x48>)
 8006cce:	480a      	ldr	r0, [pc, #40]	; (8006cf8 <MX_USB_DEVICE_Init+0x44>)
 8006cd0:	f7fe ff3e 	bl	8005b50 <USBD_RegisterClass>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006cda:	f7f9 ff23 	bl	8000b24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006cde:	4806      	ldr	r0, [pc, #24]	; (8006cf8 <MX_USB_DEVICE_Init+0x44>)
 8006ce0:	f7fe ff57 	bl	8005b92 <USBD_Start>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006cea:	f7f9 ff1b 	bl	8000b24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006cee:	bf00      	nop
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20000124 	.word	0x20000124
 8006cf8:	20000348 	.word	0x20000348
 8006cfc:	2000001c 	.word	0x2000001c

08006d00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	4603      	mov	r3, r0
 8006d08:	6039      	str	r1, [r7, #0]
 8006d0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	2212      	movs	r2, #18
 8006d10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006d12:	4b03      	ldr	r3, [pc, #12]	; (8006d20 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	20000140 	.word	0x20000140

08006d24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	6039      	str	r1, [r7, #0]
 8006d2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2204      	movs	r2, #4
 8006d34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006d36:	4b03      	ldr	r3, [pc, #12]	; (8006d44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	20000154 	.word	0x20000154

08006d48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	6039      	str	r1, [r7, #0]
 8006d52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d54:	79fb      	ldrb	r3, [r7, #7]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d105      	bne.n	8006d66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	4907      	ldr	r1, [pc, #28]	; (8006d7c <USBD_FS_ProductStrDescriptor+0x34>)
 8006d5e:	4808      	ldr	r0, [pc, #32]	; (8006d80 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d60:	f7ff fee5 	bl	8006b2e <USBD_GetString>
 8006d64:	e004      	b.n	8006d70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	4904      	ldr	r1, [pc, #16]	; (8006d7c <USBD_FS_ProductStrDescriptor+0x34>)
 8006d6a:	4805      	ldr	r0, [pc, #20]	; (8006d80 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d6c:	f7ff fedf 	bl	8006b2e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d70:	4b02      	ldr	r3, [pc, #8]	; (8006d7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20000618 	.word	0x20000618
 8006d80:	08007708 	.word	0x08007708

08006d84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	6039      	str	r1, [r7, #0]
 8006d8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006d90:	683a      	ldr	r2, [r7, #0]
 8006d92:	4904      	ldr	r1, [pc, #16]	; (8006da4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006d94:	4804      	ldr	r0, [pc, #16]	; (8006da8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006d96:	f7ff feca 	bl	8006b2e <USBD_GetString>
  return USBD_StrDesc;
 8006d9a:	4b02      	ldr	r3, [pc, #8]	; (8006da4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	20000618 	.word	0x20000618
 8006da8:	08007720 	.word	0x08007720

08006dac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	4603      	mov	r3, r0
 8006db4:	6039      	str	r1, [r7, #0]
 8006db6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	221a      	movs	r2, #26
 8006dbc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006dbe:	f000 f843 	bl	8006e48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006dc2:	4b02      	ldr	r3, [pc, #8]	; (8006dcc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	20000158 	.word	0x20000158

08006dd0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	6039      	str	r1, [r7, #0]
 8006dda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d105      	bne.n	8006dee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	4907      	ldr	r1, [pc, #28]	; (8006e04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006de6:	4808      	ldr	r0, [pc, #32]	; (8006e08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006de8:	f7ff fea1 	bl	8006b2e <USBD_GetString>
 8006dec:	e004      	b.n	8006df8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	4904      	ldr	r1, [pc, #16]	; (8006e04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006df2:	4805      	ldr	r0, [pc, #20]	; (8006e08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006df4:	f7ff fe9b 	bl	8006b2e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006df8:	4b02      	ldr	r3, [pc, #8]	; (8006e04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20000618 	.word	0x20000618
 8006e08:	08007734 	.word	0x08007734

08006e0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	4603      	mov	r3, r0
 8006e14:	6039      	str	r1, [r7, #0]
 8006e16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e18:	79fb      	ldrb	r3, [r7, #7]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d105      	bne.n	8006e2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	4907      	ldr	r1, [pc, #28]	; (8006e40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e22:	4808      	ldr	r0, [pc, #32]	; (8006e44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e24:	f7ff fe83 	bl	8006b2e <USBD_GetString>
 8006e28:	e004      	b.n	8006e34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	4904      	ldr	r1, [pc, #16]	; (8006e40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e2e:	4805      	ldr	r0, [pc, #20]	; (8006e44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e30:	f7ff fe7d 	bl	8006b2e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e34:	4b02      	ldr	r3, [pc, #8]	; (8006e40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20000618 	.word	0x20000618
 8006e44:	08007740 	.word	0x08007740

08006e48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e4e:	4b0f      	ldr	r3, [pc, #60]	; (8006e8c <Get_SerialNum+0x44>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e54:	4b0e      	ldr	r3, [pc, #56]	; (8006e90 <Get_SerialNum+0x48>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e5a:	4b0e      	ldr	r3, [pc, #56]	; (8006e94 <Get_SerialNum+0x4c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4413      	add	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d009      	beq.n	8006e82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e6e:	2208      	movs	r2, #8
 8006e70:	4909      	ldr	r1, [pc, #36]	; (8006e98 <Get_SerialNum+0x50>)
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 f814 	bl	8006ea0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e78:	2204      	movs	r2, #4
 8006e7a:	4908      	ldr	r1, [pc, #32]	; (8006e9c <Get_SerialNum+0x54>)
 8006e7c:	68b8      	ldr	r0, [r7, #8]
 8006e7e:	f000 f80f 	bl	8006ea0 <IntToUnicode>
  }
}
 8006e82:	bf00      	nop
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	1fff7a10 	.word	0x1fff7a10
 8006e90:	1fff7a14 	.word	0x1fff7a14
 8006e94:	1fff7a18 	.word	0x1fff7a18
 8006e98:	2000015a 	.word	0x2000015a
 8006e9c:	2000016a 	.word	0x2000016a

08006ea0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	75fb      	strb	r3, [r7, #23]
 8006eb6:	e027      	b.n	8006f08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	0f1b      	lsrs	r3, r3, #28
 8006ebc:	2b09      	cmp	r3, #9
 8006ebe:	d80b      	bhi.n	8006ed8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	0f1b      	lsrs	r3, r3, #28
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	7dfb      	ldrb	r3, [r7, #23]
 8006ec8:	005b      	lsls	r3, r3, #1
 8006eca:	4619      	mov	r1, r3
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	440b      	add	r3, r1
 8006ed0:	3230      	adds	r2, #48	; 0x30
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	701a      	strb	r2, [r3, #0]
 8006ed6:	e00a      	b.n	8006eee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	0f1b      	lsrs	r3, r3, #28
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	440b      	add	r3, r1
 8006ee8:	3237      	adds	r2, #55	; 0x37
 8006eea:	b2d2      	uxtb	r2, r2
 8006eec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	3301      	adds	r3, #1
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	4413      	add	r3, r2
 8006efe:	2200      	movs	r2, #0
 8006f00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
 8006f04:	3301      	adds	r3, #1
 8006f06:	75fb      	strb	r3, [r7, #23]
 8006f08:	7dfa      	ldrb	r2, [r7, #23]
 8006f0a:	79fb      	ldrb	r3, [r7, #7]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d3d3      	bcc.n	8006eb8 <IntToUnicode+0x18>
  }
}
 8006f10:	bf00      	nop
 8006f12:	371c      	adds	r7, #28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b08a      	sub	sp, #40	; 0x28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f24:	f107 0314 	add.w	r3, r7, #20
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	605a      	str	r2, [r3, #4]
 8006f2e:	609a      	str	r2, [r3, #8]
 8006f30:	60da      	str	r2, [r3, #12]
 8006f32:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f3c:	d147      	bne.n	8006fce <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f3e:	2300      	movs	r3, #0
 8006f40:	613b      	str	r3, [r7, #16]
 8006f42:	4b25      	ldr	r3, [pc, #148]	; (8006fd8 <HAL_PCD_MspInit+0xbc>)
 8006f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f46:	4a24      	ldr	r2, [pc, #144]	; (8006fd8 <HAL_PCD_MspInit+0xbc>)
 8006f48:	f043 0301 	orr.w	r3, r3, #1
 8006f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f4e:	4b22      	ldr	r3, [pc, #136]	; (8006fd8 <HAL_PCD_MspInit+0xbc>)
 8006f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	613b      	str	r3, [r7, #16]
 8006f58:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006f5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f60:	2300      	movs	r3, #0
 8006f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f64:	2300      	movs	r3, #0
 8006f66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006f68:	f107 0314 	add.w	r3, r7, #20
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	481b      	ldr	r0, [pc, #108]	; (8006fdc <HAL_PCD_MspInit+0xc0>)
 8006f70:	f7fa f9ba 	bl	80012e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006f74:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f82:	2303      	movs	r3, #3
 8006f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f86:	230a      	movs	r3, #10
 8006f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f8a:	f107 0314 	add.w	r3, r7, #20
 8006f8e:	4619      	mov	r1, r3
 8006f90:	4812      	ldr	r0, [pc, #72]	; (8006fdc <HAL_PCD_MspInit+0xc0>)
 8006f92:	f7fa f9a9 	bl	80012e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f96:	4b10      	ldr	r3, [pc, #64]	; (8006fd8 <HAL_PCD_MspInit+0xbc>)
 8006f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9a:	4a0f      	ldr	r2, [pc, #60]	; (8006fd8 <HAL_PCD_MspInit+0xbc>)
 8006f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa0:	6353      	str	r3, [r2, #52]	; 0x34
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	60fb      	str	r3, [r7, #12]
 8006fa6:	4b0c      	ldr	r3, [pc, #48]	; (8006fd8 <HAL_PCD_MspInit+0xbc>)
 8006fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006faa:	4a0b      	ldr	r2, [pc, #44]	; (8006fd8 <HAL_PCD_MspInit+0xbc>)
 8006fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8006fb2:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <HAL_PCD_MspInit+0xbc>)
 8006fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	2043      	movs	r0, #67	; 0x43
 8006fc4:	f7fa f959 	bl	800127a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006fc8:	2043      	movs	r0, #67	; 0x43
 8006fca:	f7fa f972 	bl	80012b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006fce:	bf00      	nop
 8006fd0:	3728      	adds	r7, #40	; 0x28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	40023800 	.word	0x40023800
 8006fdc:	40020000 	.word	0x40020000

08006fe0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4610      	mov	r0, r2
 8006ff8:	f7fe fe16 	bl	8005c28 <USBD_LL_SetupStage>
}
 8006ffc:	bf00      	nop
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007016:	78fa      	ldrb	r2, [r7, #3]
 8007018:	6879      	ldr	r1, [r7, #4]
 800701a:	4613      	mov	r3, r2
 800701c:	00db      	lsls	r3, r3, #3
 800701e:	1a9b      	subs	r3, r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	440b      	add	r3, r1
 8007024:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	78fb      	ldrb	r3, [r7, #3]
 800702c:	4619      	mov	r1, r3
 800702e:	f7fe fe4e 	bl	8005cce <USBD_LL_DataOutStage>
}
 8007032:	bf00      	nop
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b082      	sub	sp, #8
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	460b      	mov	r3, r1
 8007044:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800704c:	78fa      	ldrb	r2, [r7, #3]
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	4613      	mov	r3, r2
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	1a9b      	subs	r3, r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	440b      	add	r3, r1
 800705a:	3348      	adds	r3, #72	; 0x48
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	78fb      	ldrb	r3, [r7, #3]
 8007060:	4619      	mov	r1, r3
 8007062:	f7fe fe97 	bl	8005d94 <USBD_LL_DataInStage>
}
 8007066:	bf00      	nop
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b082      	sub	sp, #8
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800707c:	4618      	mov	r0, r3
 800707e:	f7fe ff9b 	bl	8005fb8 <USBD_LL_SOF>
}
 8007082:	bf00      	nop
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b084      	sub	sp, #16
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007092:	2301      	movs	r3, #1
 8007094:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	2b02      	cmp	r3, #2
 800709c:	d001      	beq.n	80070a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800709e:	f7f9 fd41 	bl	8000b24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070a8:	7bfa      	ldrb	r2, [r7, #15]
 80070aa:	4611      	mov	r1, r2
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fe ff48 	bl	8005f42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fe ff01 	bl	8005ec0 <USBD_LL_Reset>
}
 80070be:	bf00      	nop
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7fe ff43 	bl	8005f62 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	6812      	ldr	r2, [r2, #0]
 80070ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070ee:	f043 0301 	orr.w	r3, r3, #1
 80070f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d005      	beq.n	8007108 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070fc:	4b04      	ldr	r3, [pc, #16]	; (8007110 <HAL_PCD_SuspendCallback+0x48>)
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	4a03      	ldr	r2, [pc, #12]	; (8007110 <HAL_PCD_SuspendCallback+0x48>)
 8007102:	f043 0306 	orr.w	r3, r3, #6
 8007106:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007108:	bf00      	nop
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	e000ed00 	.word	0xe000ed00

08007114 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007122:	4618      	mov	r0, r3
 8007124:	f7fe ff32 	bl	8005f8c <USBD_LL_Resume>
}
 8007128:	bf00      	nop
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	460b      	mov	r3, r1
 800713a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007142:	78fa      	ldrb	r2, [r7, #3]
 8007144:	4611      	mov	r1, r2
 8007146:	4618      	mov	r0, r3
 8007148:	f7fe ff5d 	bl	8006006 <USBD_LL_IsoOUTIncomplete>
}
 800714c:	bf00      	nop
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007166:	78fa      	ldrb	r2, [r7, #3]
 8007168:	4611      	mov	r1, r2
 800716a:	4618      	mov	r0, r3
 800716c:	f7fe ff3e 	bl	8005fec <USBD_LL_IsoINIncomplete>
}
 8007170:	bf00      	nop
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe ff4a 	bl	8006020 <USBD_LL_DevConnected>
}
 800718c:	bf00      	nop
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fe ff47 	bl	8006036 <USBD_LL_DevDisconnected>
}
 80071a8:	bf00      	nop
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d13c      	bne.n	800723a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80071c0:	4a20      	ldr	r2, [pc, #128]	; (8007244 <USBD_LL_Init+0x94>)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a1e      	ldr	r2, [pc, #120]	; (8007244 <USBD_LL_Init+0x94>)
 80071cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80071d0:	4b1c      	ldr	r3, [pc, #112]	; (8007244 <USBD_LL_Init+0x94>)
 80071d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80071d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80071d8:	4b1a      	ldr	r3, [pc, #104]	; (8007244 <USBD_LL_Init+0x94>)
 80071da:	2204      	movs	r2, #4
 80071dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80071de:	4b19      	ldr	r3, [pc, #100]	; (8007244 <USBD_LL_Init+0x94>)
 80071e0:	2202      	movs	r2, #2
 80071e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80071e4:	4b17      	ldr	r3, [pc, #92]	; (8007244 <USBD_LL_Init+0x94>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80071ea:	4b16      	ldr	r3, [pc, #88]	; (8007244 <USBD_LL_Init+0x94>)
 80071ec:	2202      	movs	r2, #2
 80071ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80071f0:	4b14      	ldr	r3, [pc, #80]	; (8007244 <USBD_LL_Init+0x94>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80071f6:	4b13      	ldr	r3, [pc, #76]	; (8007244 <USBD_LL_Init+0x94>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80071fc:	4b11      	ldr	r3, [pc, #68]	; (8007244 <USBD_LL_Init+0x94>)
 80071fe:	2200      	movs	r2, #0
 8007200:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007202:	4b10      	ldr	r3, [pc, #64]	; (8007244 <USBD_LL_Init+0x94>)
 8007204:	2201      	movs	r2, #1
 8007206:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007208:	4b0e      	ldr	r3, [pc, #56]	; (8007244 <USBD_LL_Init+0x94>)
 800720a:	2200      	movs	r2, #0
 800720c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800720e:	480d      	ldr	r0, [pc, #52]	; (8007244 <USBD_LL_Init+0x94>)
 8007210:	f7fb f810 	bl	8002234 <HAL_PCD_Init>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800721a:	f7f9 fc83 	bl	8000b24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800721e:	2180      	movs	r1, #128	; 0x80
 8007220:	4808      	ldr	r0, [pc, #32]	; (8007244 <USBD_LL_Init+0x94>)
 8007222:	f7fc f956 	bl	80034d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007226:	2240      	movs	r2, #64	; 0x40
 8007228:	2100      	movs	r1, #0
 800722a:	4806      	ldr	r0, [pc, #24]	; (8007244 <USBD_LL_Init+0x94>)
 800722c:	f7fc f90a 	bl	8003444 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007230:	2280      	movs	r2, #128	; 0x80
 8007232:	2101      	movs	r1, #1
 8007234:	4803      	ldr	r0, [pc, #12]	; (8007244 <USBD_LL_Init+0x94>)
 8007236:	f7fc f905 	bl	8003444 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	20000818 	.word	0x20000818

08007248 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800725e:	4618      	mov	r0, r3
 8007260:	f7fb f905 	bl	800246e <HAL_PCD_Start>
 8007264:	4603      	mov	r3, r0
 8007266:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007268:	7bfb      	ldrb	r3, [r7, #15]
 800726a:	4618      	mov	r0, r3
 800726c:	f000 f918 	bl	80074a0 <USBD_Get_USB_Status>
 8007270:	4603      	mov	r3, r0
 8007272:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007274:	7bbb      	ldrb	r3, [r7, #14]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	4608      	mov	r0, r1
 8007288:	4611      	mov	r1, r2
 800728a:	461a      	mov	r2, r3
 800728c:	4603      	mov	r3, r0
 800728e:	70fb      	strb	r3, [r7, #3]
 8007290:	460b      	mov	r3, r1
 8007292:	70bb      	strb	r3, [r7, #2]
 8007294:	4613      	mov	r3, r2
 8007296:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007298:	2300      	movs	r3, #0
 800729a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800729c:	2300      	movs	r3, #0
 800729e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80072a6:	78bb      	ldrb	r3, [r7, #2]
 80072a8:	883a      	ldrh	r2, [r7, #0]
 80072aa:	78f9      	ldrb	r1, [r7, #3]
 80072ac:	f7fb fce9 	bl	8002c82 <HAL_PCD_EP_Open>
 80072b0:	4603      	mov	r3, r0
 80072b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 f8f2 	bl	80074a0 <USBD_Get_USB_Status>
 80072bc:	4603      	mov	r3, r0
 80072be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	460b      	mov	r3, r1
 80072d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072e4:	78fa      	ldrb	r2, [r7, #3]
 80072e6:	4611      	mov	r1, r2
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fb fd32 	bl	8002d52 <HAL_PCD_EP_Close>
 80072ee:	4603      	mov	r3, r0
 80072f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 f8d3 	bl	80074a0 <USBD_Get_USB_Status>
 80072fa:	4603      	mov	r3, r0
 80072fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007322:	78fa      	ldrb	r2, [r7, #3]
 8007324:	4611      	mov	r1, r2
 8007326:	4618      	mov	r0, r3
 8007328:	f7fb fdf2 	bl	8002f10 <HAL_PCD_EP_SetStall>
 800732c:	4603      	mov	r3, r0
 800732e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007330:	7bfb      	ldrb	r3, [r7, #15]
 8007332:	4618      	mov	r0, r3
 8007334:	f000 f8b4 	bl	80074a0 <USBD_Get_USB_Status>
 8007338:	4603      	mov	r3, r0
 800733a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800733c:	7bbb      	ldrb	r3, [r7, #14]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b084      	sub	sp, #16
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	460b      	mov	r3, r1
 8007350:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007360:	78fa      	ldrb	r2, [r7, #3]
 8007362:	4611      	mov	r1, r2
 8007364:	4618      	mov	r0, r3
 8007366:	f7fb fe37 	bl	8002fd8 <HAL_PCD_EP_ClrStall>
 800736a:	4603      	mov	r3, r0
 800736c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	4618      	mov	r0, r3
 8007372:	f000 f895 	bl	80074a0 <USBD_Get_USB_Status>
 8007376:	4603      	mov	r3, r0
 8007378:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800737a:	7bbb      	ldrb	r3, [r7, #14]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	460b      	mov	r3, r1
 800738e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007396:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007398:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800739c:	2b00      	cmp	r3, #0
 800739e:	da0b      	bge.n	80073b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073a6:	68f9      	ldr	r1, [r7, #12]
 80073a8:	4613      	mov	r3, r2
 80073aa:	00db      	lsls	r3, r3, #3
 80073ac:	1a9b      	subs	r3, r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	440b      	add	r3, r1
 80073b2:	333e      	adds	r3, #62	; 0x3e
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	e00b      	b.n	80073d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80073b8:	78fb      	ldrb	r3, [r7, #3]
 80073ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073be:	68f9      	ldr	r1, [r7, #12]
 80073c0:	4613      	mov	r3, r2
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	1a9b      	subs	r3, r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	440b      	add	r3, r1
 80073ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80073ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073ec:	2300      	movs	r3, #0
 80073ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073f6:	78fa      	ldrb	r2, [r7, #3]
 80073f8:	4611      	mov	r1, r2
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fb fc1c 	bl	8002c38 <HAL_PCD_SetAddress>
 8007400:	4603      	mov	r3, r0
 8007402:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	4618      	mov	r0, r3
 8007408:	f000 f84a 	bl	80074a0 <USBD_Get_USB_Status>
 800740c:	4603      	mov	r3, r0
 800740e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007410:	7bbb      	ldrb	r3, [r7, #14]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b086      	sub	sp, #24
 800741e:	af00      	add	r7, sp, #0
 8007420:	60f8      	str	r0, [r7, #12]
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	603b      	str	r3, [r7, #0]
 8007426:	460b      	mov	r3, r1
 8007428:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800742a:	2300      	movs	r3, #0
 800742c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007438:	7af9      	ldrb	r1, [r7, #11]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	f7fb fd1d 	bl	8002e7c <HAL_PCD_EP_Transmit>
 8007442:	4603      	mov	r3, r0
 8007444:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007446:	7dfb      	ldrb	r3, [r7, #23]
 8007448:	4618      	mov	r0, r3
 800744a:	f000 f829 	bl	80074a0 <USBD_Get_USB_Status>
 800744e:	4603      	mov	r3, r0
 8007450:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007452:	7dbb      	ldrb	r3, [r7, #22]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3718      	adds	r7, #24
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	607a      	str	r2, [r7, #4]
 8007466:	603b      	str	r3, [r7, #0]
 8007468:	460b      	mov	r3, r1
 800746a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007470:	2300      	movs	r3, #0
 8007472:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800747a:	7af9      	ldrb	r1, [r7, #11]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	f7fb fcb1 	bl	8002de6 <HAL_PCD_EP_Receive>
 8007484:	4603      	mov	r3, r0
 8007486:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007488:	7dfb      	ldrb	r3, [r7, #23]
 800748a:	4618      	mov	r0, r3
 800748c:	f000 f808 	bl	80074a0 <USBD_Get_USB_Status>
 8007490:	4603      	mov	r3, r0
 8007492:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007494:	7dbb      	ldrb	r3, [r7, #22]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	4603      	mov	r3, r0
 80074a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80074ae:	79fb      	ldrb	r3, [r7, #7]
 80074b0:	2b03      	cmp	r3, #3
 80074b2:	d817      	bhi.n	80074e4 <USBD_Get_USB_Status+0x44>
 80074b4:	a201      	add	r2, pc, #4	; (adr r2, 80074bc <USBD_Get_USB_Status+0x1c>)
 80074b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ba:	bf00      	nop
 80074bc:	080074cd 	.word	0x080074cd
 80074c0:	080074d3 	.word	0x080074d3
 80074c4:	080074d9 	.word	0x080074d9
 80074c8:	080074df 	.word	0x080074df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	73fb      	strb	r3, [r7, #15]
    break;
 80074d0:	e00b      	b.n	80074ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80074d2:	2303      	movs	r3, #3
 80074d4:	73fb      	strb	r3, [r7, #15]
    break;
 80074d6:	e008      	b.n	80074ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80074d8:	2301      	movs	r3, #1
 80074da:	73fb      	strb	r3, [r7, #15]
    break;
 80074dc:	e005      	b.n	80074ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80074de:	2303      	movs	r3, #3
 80074e0:	73fb      	strb	r3, [r7, #15]
    break;
 80074e2:	e002      	b.n	80074ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80074e4:	2303      	movs	r3, #3
 80074e6:	73fb      	strb	r3, [r7, #15]
    break;
 80074e8:	bf00      	nop
  }
  return usb_status;
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <__errno>:
 80074f8:	4b01      	ldr	r3, [pc, #4]	; (8007500 <__errno+0x8>)
 80074fa:	6818      	ldr	r0, [r3, #0]
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	20000174 	.word	0x20000174

08007504 <__libc_init_array>:
 8007504:	b570      	push	{r4, r5, r6, lr}
 8007506:	4e0d      	ldr	r6, [pc, #52]	; (800753c <__libc_init_array+0x38>)
 8007508:	4c0d      	ldr	r4, [pc, #52]	; (8007540 <__libc_init_array+0x3c>)
 800750a:	1ba4      	subs	r4, r4, r6
 800750c:	10a4      	asrs	r4, r4, #2
 800750e:	2500      	movs	r5, #0
 8007510:	42a5      	cmp	r5, r4
 8007512:	d109      	bne.n	8007528 <__libc_init_array+0x24>
 8007514:	4e0b      	ldr	r6, [pc, #44]	; (8007544 <__libc_init_array+0x40>)
 8007516:	4c0c      	ldr	r4, [pc, #48]	; (8007548 <__libc_init_array+0x44>)
 8007518:	f000 f8ea 	bl	80076f0 <_init>
 800751c:	1ba4      	subs	r4, r4, r6
 800751e:	10a4      	asrs	r4, r4, #2
 8007520:	2500      	movs	r5, #0
 8007522:	42a5      	cmp	r5, r4
 8007524:	d105      	bne.n	8007532 <__libc_init_array+0x2e>
 8007526:	bd70      	pop	{r4, r5, r6, pc}
 8007528:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800752c:	4798      	blx	r3
 800752e:	3501      	adds	r5, #1
 8007530:	e7ee      	b.n	8007510 <__libc_init_array+0xc>
 8007532:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007536:	4798      	blx	r3
 8007538:	3501      	adds	r5, #1
 800753a:	e7f2      	b.n	8007522 <__libc_init_array+0x1e>
 800753c:	08007770 	.word	0x08007770
 8007540:	08007770 	.word	0x08007770
 8007544:	08007770 	.word	0x08007770
 8007548:	08007774 	.word	0x08007774

0800754c <malloc>:
 800754c:	4b02      	ldr	r3, [pc, #8]	; (8007558 <malloc+0xc>)
 800754e:	4601      	mov	r1, r0
 8007550:	6818      	ldr	r0, [r3, #0]
 8007552:	f000 b861 	b.w	8007618 <_malloc_r>
 8007556:	bf00      	nop
 8007558:	20000174 	.word	0x20000174

0800755c <free>:
 800755c:	4b02      	ldr	r3, [pc, #8]	; (8007568 <free+0xc>)
 800755e:	4601      	mov	r1, r0
 8007560:	6818      	ldr	r0, [r3, #0]
 8007562:	f000 b80b 	b.w	800757c <_free_r>
 8007566:	bf00      	nop
 8007568:	20000174 	.word	0x20000174

0800756c <memset>:
 800756c:	4402      	add	r2, r0
 800756e:	4603      	mov	r3, r0
 8007570:	4293      	cmp	r3, r2
 8007572:	d100      	bne.n	8007576 <memset+0xa>
 8007574:	4770      	bx	lr
 8007576:	f803 1b01 	strb.w	r1, [r3], #1
 800757a:	e7f9      	b.n	8007570 <memset+0x4>

0800757c <_free_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	4605      	mov	r5, r0
 8007580:	2900      	cmp	r1, #0
 8007582:	d045      	beq.n	8007610 <_free_r+0x94>
 8007584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007588:	1f0c      	subs	r4, r1, #4
 800758a:	2b00      	cmp	r3, #0
 800758c:	bfb8      	it	lt
 800758e:	18e4      	addlt	r4, r4, r3
 8007590:	f000 f8ac 	bl	80076ec <__malloc_lock>
 8007594:	4a1f      	ldr	r2, [pc, #124]	; (8007614 <_free_r+0x98>)
 8007596:	6813      	ldr	r3, [r2, #0]
 8007598:	4610      	mov	r0, r2
 800759a:	b933      	cbnz	r3, 80075aa <_free_r+0x2e>
 800759c:	6063      	str	r3, [r4, #4]
 800759e:	6014      	str	r4, [r2, #0]
 80075a0:	4628      	mov	r0, r5
 80075a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075a6:	f000 b8a2 	b.w	80076ee <__malloc_unlock>
 80075aa:	42a3      	cmp	r3, r4
 80075ac:	d90c      	bls.n	80075c8 <_free_r+0x4c>
 80075ae:	6821      	ldr	r1, [r4, #0]
 80075b0:	1862      	adds	r2, r4, r1
 80075b2:	4293      	cmp	r3, r2
 80075b4:	bf04      	itt	eq
 80075b6:	681a      	ldreq	r2, [r3, #0]
 80075b8:	685b      	ldreq	r3, [r3, #4]
 80075ba:	6063      	str	r3, [r4, #4]
 80075bc:	bf04      	itt	eq
 80075be:	1852      	addeq	r2, r2, r1
 80075c0:	6022      	streq	r2, [r4, #0]
 80075c2:	6004      	str	r4, [r0, #0]
 80075c4:	e7ec      	b.n	80075a0 <_free_r+0x24>
 80075c6:	4613      	mov	r3, r2
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	b10a      	cbz	r2, 80075d0 <_free_r+0x54>
 80075cc:	42a2      	cmp	r2, r4
 80075ce:	d9fa      	bls.n	80075c6 <_free_r+0x4a>
 80075d0:	6819      	ldr	r1, [r3, #0]
 80075d2:	1858      	adds	r0, r3, r1
 80075d4:	42a0      	cmp	r0, r4
 80075d6:	d10b      	bne.n	80075f0 <_free_r+0x74>
 80075d8:	6820      	ldr	r0, [r4, #0]
 80075da:	4401      	add	r1, r0
 80075dc:	1858      	adds	r0, r3, r1
 80075de:	4282      	cmp	r2, r0
 80075e0:	6019      	str	r1, [r3, #0]
 80075e2:	d1dd      	bne.n	80075a0 <_free_r+0x24>
 80075e4:	6810      	ldr	r0, [r2, #0]
 80075e6:	6852      	ldr	r2, [r2, #4]
 80075e8:	605a      	str	r2, [r3, #4]
 80075ea:	4401      	add	r1, r0
 80075ec:	6019      	str	r1, [r3, #0]
 80075ee:	e7d7      	b.n	80075a0 <_free_r+0x24>
 80075f0:	d902      	bls.n	80075f8 <_free_r+0x7c>
 80075f2:	230c      	movs	r3, #12
 80075f4:	602b      	str	r3, [r5, #0]
 80075f6:	e7d3      	b.n	80075a0 <_free_r+0x24>
 80075f8:	6820      	ldr	r0, [r4, #0]
 80075fa:	1821      	adds	r1, r4, r0
 80075fc:	428a      	cmp	r2, r1
 80075fe:	bf04      	itt	eq
 8007600:	6811      	ldreq	r1, [r2, #0]
 8007602:	6852      	ldreq	r2, [r2, #4]
 8007604:	6062      	str	r2, [r4, #4]
 8007606:	bf04      	itt	eq
 8007608:	1809      	addeq	r1, r1, r0
 800760a:	6021      	streq	r1, [r4, #0]
 800760c:	605c      	str	r4, [r3, #4]
 800760e:	e7c7      	b.n	80075a0 <_free_r+0x24>
 8007610:	bd38      	pop	{r3, r4, r5, pc}
 8007612:	bf00      	nop
 8007614:	20000200 	.word	0x20000200

08007618 <_malloc_r>:
 8007618:	b570      	push	{r4, r5, r6, lr}
 800761a:	1ccd      	adds	r5, r1, #3
 800761c:	f025 0503 	bic.w	r5, r5, #3
 8007620:	3508      	adds	r5, #8
 8007622:	2d0c      	cmp	r5, #12
 8007624:	bf38      	it	cc
 8007626:	250c      	movcc	r5, #12
 8007628:	2d00      	cmp	r5, #0
 800762a:	4606      	mov	r6, r0
 800762c:	db01      	blt.n	8007632 <_malloc_r+0x1a>
 800762e:	42a9      	cmp	r1, r5
 8007630:	d903      	bls.n	800763a <_malloc_r+0x22>
 8007632:	230c      	movs	r3, #12
 8007634:	6033      	str	r3, [r6, #0]
 8007636:	2000      	movs	r0, #0
 8007638:	bd70      	pop	{r4, r5, r6, pc}
 800763a:	f000 f857 	bl	80076ec <__malloc_lock>
 800763e:	4a21      	ldr	r2, [pc, #132]	; (80076c4 <_malloc_r+0xac>)
 8007640:	6814      	ldr	r4, [r2, #0]
 8007642:	4621      	mov	r1, r4
 8007644:	b991      	cbnz	r1, 800766c <_malloc_r+0x54>
 8007646:	4c20      	ldr	r4, [pc, #128]	; (80076c8 <_malloc_r+0xb0>)
 8007648:	6823      	ldr	r3, [r4, #0]
 800764a:	b91b      	cbnz	r3, 8007654 <_malloc_r+0x3c>
 800764c:	4630      	mov	r0, r6
 800764e:	f000 f83d 	bl	80076cc <_sbrk_r>
 8007652:	6020      	str	r0, [r4, #0]
 8007654:	4629      	mov	r1, r5
 8007656:	4630      	mov	r0, r6
 8007658:	f000 f838 	bl	80076cc <_sbrk_r>
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	d124      	bne.n	80076aa <_malloc_r+0x92>
 8007660:	230c      	movs	r3, #12
 8007662:	6033      	str	r3, [r6, #0]
 8007664:	4630      	mov	r0, r6
 8007666:	f000 f842 	bl	80076ee <__malloc_unlock>
 800766a:	e7e4      	b.n	8007636 <_malloc_r+0x1e>
 800766c:	680b      	ldr	r3, [r1, #0]
 800766e:	1b5b      	subs	r3, r3, r5
 8007670:	d418      	bmi.n	80076a4 <_malloc_r+0x8c>
 8007672:	2b0b      	cmp	r3, #11
 8007674:	d90f      	bls.n	8007696 <_malloc_r+0x7e>
 8007676:	600b      	str	r3, [r1, #0]
 8007678:	50cd      	str	r5, [r1, r3]
 800767a:	18cc      	adds	r4, r1, r3
 800767c:	4630      	mov	r0, r6
 800767e:	f000 f836 	bl	80076ee <__malloc_unlock>
 8007682:	f104 000b 	add.w	r0, r4, #11
 8007686:	1d23      	adds	r3, r4, #4
 8007688:	f020 0007 	bic.w	r0, r0, #7
 800768c:	1ac3      	subs	r3, r0, r3
 800768e:	d0d3      	beq.n	8007638 <_malloc_r+0x20>
 8007690:	425a      	negs	r2, r3
 8007692:	50e2      	str	r2, [r4, r3]
 8007694:	e7d0      	b.n	8007638 <_malloc_r+0x20>
 8007696:	428c      	cmp	r4, r1
 8007698:	684b      	ldr	r3, [r1, #4]
 800769a:	bf16      	itet	ne
 800769c:	6063      	strne	r3, [r4, #4]
 800769e:	6013      	streq	r3, [r2, #0]
 80076a0:	460c      	movne	r4, r1
 80076a2:	e7eb      	b.n	800767c <_malloc_r+0x64>
 80076a4:	460c      	mov	r4, r1
 80076a6:	6849      	ldr	r1, [r1, #4]
 80076a8:	e7cc      	b.n	8007644 <_malloc_r+0x2c>
 80076aa:	1cc4      	adds	r4, r0, #3
 80076ac:	f024 0403 	bic.w	r4, r4, #3
 80076b0:	42a0      	cmp	r0, r4
 80076b2:	d005      	beq.n	80076c0 <_malloc_r+0xa8>
 80076b4:	1a21      	subs	r1, r4, r0
 80076b6:	4630      	mov	r0, r6
 80076b8:	f000 f808 	bl	80076cc <_sbrk_r>
 80076bc:	3001      	adds	r0, #1
 80076be:	d0cf      	beq.n	8007660 <_malloc_r+0x48>
 80076c0:	6025      	str	r5, [r4, #0]
 80076c2:	e7db      	b.n	800767c <_malloc_r+0x64>
 80076c4:	20000200 	.word	0x20000200
 80076c8:	20000204 	.word	0x20000204

080076cc <_sbrk_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4c06      	ldr	r4, [pc, #24]	; (80076e8 <_sbrk_r+0x1c>)
 80076d0:	2300      	movs	r3, #0
 80076d2:	4605      	mov	r5, r0
 80076d4:	4608      	mov	r0, r1
 80076d6:	6023      	str	r3, [r4, #0]
 80076d8:	f7f9 fbea 	bl	8000eb0 <_sbrk>
 80076dc:	1c43      	adds	r3, r0, #1
 80076de:	d102      	bne.n	80076e6 <_sbrk_r+0x1a>
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	b103      	cbz	r3, 80076e6 <_sbrk_r+0x1a>
 80076e4:	602b      	str	r3, [r5, #0]
 80076e6:	bd38      	pop	{r3, r4, r5, pc}
 80076e8:	20000c20 	.word	0x20000c20

080076ec <__malloc_lock>:
 80076ec:	4770      	bx	lr

080076ee <__malloc_unlock>:
 80076ee:	4770      	bx	lr

080076f0 <_init>:
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f2:	bf00      	nop
 80076f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f6:	bc08      	pop	{r3}
 80076f8:	469e      	mov	lr, r3
 80076fa:	4770      	bx	lr

080076fc <_fini>:
 80076fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fe:	bf00      	nop
 8007700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007702:	bc08      	pop	{r3}
 8007704:	469e      	mov	lr, r3
 8007706:	4770      	bx	lr
